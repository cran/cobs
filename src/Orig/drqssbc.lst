drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 1

FILE  "drqssbc.f"
     1        subroutine drqssbc(nrq,nl1,neqc,niqc,niqc1,nvars,nact,ifl,mxs,psw
        ,
                                                                              ^
**** WAR  #391:  variable "psw" used only in unreached code
     2  &      e,ner,x,f,erql1n,res,indx,w,nt,nsol,sol,tl,toler,big,eps,icyc,
     3  &      tmin,k,k0,lstart,factor)
     4  c
     5  c This is a modification of Bartels and Conn (1980) as described in 
     6  c Koenker and Ng (1997), "A Remark on Bartels and Conn's Linearly Const
        rained
     7  c L1 Algorithm", ACM Transaction on Mathematical Software, forthcoming.
     8  c
     9  c It also contains the parametric linear programming on `tau' and `lamb
        da' as 
    10  c described in Ng (1996), "An Algorithm for Quantile Smoothing Splines"
        ,
    11  c Computational Statistics & Data Analysis, 22, 99-118.
    12  c
    13  c
    14  c     ***************
    15  c     front end interface
    16  c     ***************
    17  c
    18  c     +++++ parameters +++++
    19  c     ----------------------------------------------------------
    20  c                           input
    21  c     name   type  subscrpt  output        description
    22  c                           scratch
    23  c     ..........................................................
    24  c     nrq    int.    none      in      number of observations
    25  c                                      in the rq norm that correspond
    26  c                                      to the fidelity
    27  c                                      (may be zero)
    28  c
    29  c     nl1    int.    none      in      number of observations
    30  c                                      in the l1 norm that correspond
    31  c                                      to the roughness measure
    32  c                                      (may be zero)
    33  c
    34  c     neqc   int.    none      in      number of equality
    35  c                                      constraints
    36  c                                      (may be zero)
    37  c
    38  c     niqc   int.    none      in      number of inequality
    39  c                                      constraints
    40  c                                      (may be zero)
    41  c
    42  c     niqc1  int.    none      in      part of niqc that belongs to
    43  c                                      the loo roughness measure
    44  c                                      (may be zero)
    45  c
    46  c     nvars  int.    none      in      number of variables
    47  c
    48  c     nact   int.    none      out     number of active
    49  c                                      equations/constraints
    50  c                                      at termination
    51  c                                      (if any, their associated
    52  c                                      column positions in  e  will
    53  c                                      be listed in  indx(1)
    54  c                                      through  indx(nact) )
    55  c
    56  c     ifl    int.    none      out     termination code
    57  c                                      (see below)
    58  c
    59  c     mxs    int.    none      in      maximum number of steps
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 2

    60  c                                      allowed
    61  c
    62  c     psw    logic.  none      in      print switch
    63  c                                      (see below)
    64  c
    65  c     e      real     2        in      equation/constraint matrix
    66  c                                      the first  nrq+nl1  columns
    67  c                                      (see note below) specify
    68  c                                      equations, the remaining
    69  c                                      columns (if any) specify
    70  c                                      constraints.
    71  c
    72  c     ner    int.    none      in      row dimension of e
    73  c
    74  c     x      real     1        in      starting values for the
    75  c                                      unknowns (use zeros if no
    76  c                                      guess is available)
    77  c                              out     termination values for
    78  c                                      the unknowns
    79  c
    80  c     f      real     1        in      equation/constraint
    81  c                                      right-hand sides
    82  c
    83  c     erql1n real    none     out      rq-l1 norm of equation
    84  c                                      residuals at termination
    85  c
    86  c     res    real     1        out     equation/constraint
    87  c                                      residuals at termination
    88  c
    89  c     indx   int.     1        out     index vector used to record
    90  c                                      the order in which the columns
    91  c                                      of  e  are being processed
    92  c
    93  c     w      real     1        scr.    working storage
    94  c     nt     int.     none     out     number of unique tau or lambda
    95  c                                      solutions while performing param
        etric
    96  c                                      in tau or lambda
    97  c     nsol   int.     none     in      upper limit for the number of un
        ique
    98  c                                      tau or lambda solutions
    99  c     sol    real     2        out     matrix of solutions when perform
        ing
   100  c                                      parametric programming in tau or
         lambda
   101  c     tl     real     1        in      values of initial tau and lambda
   102  c     toler  real     none     in      tolerance used in parametric pro
        gramming
   103  c     big    real     none     in      largest representable floating p
        oint
   104  c                                      number
   105  c     eps    real     none     in      least positive number satisfying
          
   106  c                                      (1.0 + eps) .gt. 1.0
   107  c     icyc   int.     none     out     number of cycles to achieve conv
        ergence
   108  c     tmin   real     none     in      smallest value of tau to begin 
   109  c                                      parametric programming in tau
   110  c     k      int.     none     out     effective dimension of the model
   111  c     k0     int.     none     in      the largest effective dimension 
        of the
   112  c                                      model allowed during parametric
   113  c                                      programming in lambda
   114  c     lstart real    none     in       largest value of lambda to begin
         
   115  c                                      parametric programming in lambda
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 3

   116  c     factor real    none     in       factor to determine the how big 
        a step
   117  c                                      to take to the next smaller lamb
        da 
   118  c                                      during parametric programming in
         lambda
   119  c     ----------------------------------------------------------
   120  c
   121  c     +++++ purpose +++++
   122  c     ----------------------------------------------------------
   123  c     this subroutine solves the   nrq+nl1 by nvars
   124  c     system of equations
   125  c
   126  c                       (a-transpose) * x   ==   b
   127  c
   128  c     subject to the  neqc   constraints
   129  c
   130  c                       (g-transpose) * x  .eq.  h
   131  c
   132  c     and the  niqc  inequality constraints
   133  c
   134  c                       (c-transpose) * x  .ge.  d
   135  c
   136  c     for the unknowns  x(1),...,x(nvars).
   137  c
   138  c     the problem must be well-posed, nontrivial
   139  c     and overdetermined in the sense that
   140  c
   141  c                          nvars .ge. 1
   142  c                          nrq+nl1 .ge. 0
   143  c                          neqc  .ge. 0
   144  c                          niqc  .ge. 0
   145  c               nrq+nl1+neqc+niqc  .ge. nvars.
   146  c
   147  c     further, no column of  a, g  or  c  should be zero.
   148  c     if these conditions are not met, the program
   149  c     will terminate without performing any substantive
   150  c     computations.
   151  c
   152  c     a point  x  is a solution if it minimizes the equation
   153  c     residuals from among all points which satisfy the
   154  c     constraints.  at any (nondegenerate) solution
   155  c     there will be  nact  equations and constraints
   156  c     whose residuals
   157  c
   158  c          (a(i)-transpose) * x - b(i)
   159  c
   160  c          (g(i)-transpose) * x - h(i)
   161  c
   162  c     and
   163  c
   164  c          (c(i)-transpose) * x - d(i)
   165  c
   166  c     are zero.
   167  c
   168  c     the columns of  (a,g,c)  corresponding to the zero residuals
   169  c     are referred to as  active columns  throughout this listing.
   170  c     the numbers of the active columns are maintained as the
   171  c     entries  1,...,nact  of the array  indx.
   172  c
   173  c     a solution  x  is found by minimizing a piecewise
   174  c     linear penalty function formed from the  l1
   175  c     norm of the equation residuals and the sum of the
   176  c     infeasibilities in the constraints.
   177  c     the minimization proceeds in a step-by-step
   178  c     fashion, terminating after a finite number of steps.
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 4

   179  c
   180  c     note that  a, g  and  c  appear transposed in the
   181  c     problem formulation.  hence it is the columns of  (a,g,c)
   182  c     which define the equations and constraints respectively.
   183  c
   184  c     the array  e  is a composite of   a, g and c
   185  c     and  f  is a composite of  b, h  and  d.
   186  c     e  should contain  a  as its first  nrq+nl1  columns.
   187  c     it should contain  g  as its next  neqc  columns and
   188  c     contain  c  as its remaining  niqc  columns.
   189  c     similarly  f  should contain  b  as its first
   190  c     nrq+nl1  components,  h  as its next  neqc  components
   191  c     and  d  as its last  niqc  components.
   192  c     ----------------------------------------------------------
   193  c
   194  c     +++++ arrays +++++
   195  c     ----------------------------------------------------------
   196  c     e  is to be dimensioned at least    n  by  m,
   197  c     x                       at least    n,
   198  c     f                       at least    m,
   199  c     res                     at least    m,
   200  c     indx                    at least    m,
   201  c     w                       at least    ((3*n*n+11*n+2)/2) + (2*m).
   202  c
   203  c                                         where  n = nvars  and
   204  c                                         m = nrq+nl1+neqc+niqc
   205  c     ----------------------------------------------------------
   206  c
   207  c     +++++ initialization +++++
   208  c     ----------------------------------------------------------
   209  c     the user must initialize
   210  c
   211  c          nrq,nl1,neqc,niqc,nvars,mxs,psw,e,ner,x,f .
   212  c
   213  c     the following are set 
   214  c     and do not require initialization
   215  c
   216  c          nact,indx,res .
   217  c
   218  c     the array  w  is used as scratch space.
   219  c     ----------------------------------------------------------
   220  c
   221  c     +++++ termination codes and intermediate printing +++++
   222  c     ----------------------------------------------------------
   223  c     mxs  sets a limit on the number of minimization steps to be
   224  c     taken.
   225  c
   226  c     upon termination  ifl  will be set according to
   227  c     the following code ...
   228  c
   229  c             ifl = 1 .... successful termination.
   230  c
   231  c             ifl = 2 .... unsuccessful termination.
   232  c                          constraints cannot be satisfied.
   233  c                          problem is infeasible.
   234  c
   235  c             ifl = 3 .... limit imposed by  mxs  reached
   236  c                          without finding a solution.
   237  c
   238  c             ifl = 4 .... program aborted.
   239  c                          numerical difficulties
   240  c                          due to ill-conditioning.
   241  c
   242  c             ifl = 5 .... nrq, nl1, nvars, neqc and/or
   243  c                          niqc  have improper values
   244  c                          or  e  contains a zero column.
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 5

   245  c
   246  c     in all cases the output parameters  x,erql1n and res
   247  c     will contain the values which they reached at termination.
   248  c
   249  c     intermediate printing will be turned off if  psw = .false. .
   250  c     on the other hand,  details of each minimization cycle
   251  c     will be printed if  psw  is set to  .true.
   252  c
   253        integer ifl,indx(1),mxs,nact,ner,nt
   254        integer nrq,nl1,neqc,niqc,niqc1,nvars,nsol,icyc,k,k0
   255        logical psw
   256        double precision e(ner,1),erql1n(1),f(1),res(1),w(1),x(1)
   257        double precision sol(nvars+6,nsol),tl(1),toler,big,eps
   258        double precision tmin,lstart,factor
   259  c
   260  c     ////////////////  begin program  /////////////////////////
   261  c
   262        call dcrql1lt(nrq,nl1,neqc,niqc,niqc1,nvars,nact,ifl,mxs,psw,e,
   263  &      ner,x,f,erql1n,res,indx,w,nt,nsol,sol,tl(1),tl(2),toler,big,eps,
                           ^
**** ERR  #325:  argument "erql1n" is array, but dummy argument is variable
                 See: "drqssbc.f" line #267
   263  &      ner,x,f,erql1n,res,indx,w,nt,nsol,sol,tl(1),tl(2),toler,big,eps,
                                                             ^
**** WAR  #120:  subscript expression on "tl" out of bounds
   264  &      icyc,tmin,k,k0,lstart,factor)
   265        return
   266        end
   267        subroutine dcrql1lt(nrq,nl1,neqc,niqc,niqc1,nvars,nact,ifl,mxs,
   268  &      psw,e,ner,x,f,erql1n,res,indx,w,nt,nsol,sol,t,lam,toler,big,eps,
                ^
**** WAR  #391:  variable "psw" used only in unreached code
   269  &      icyc,tmin,k,k0,lstart,factor)
   270  c
   271  c
   272  c     ***************
   273  c     main body
   274  c     ***************
   275  c
   276        integer ifl,indx(1),mxs,nact,neqc,nrq,nl1,ner,niqc,niqc1,nvars,
   277  &      nrql1,nt
   278        integer nsol,k,k0
   279        logical psw,itend,ilend,ilfix
   280        double precision e(ner,1),erql1n,f(1),res(1),w(1),x(1)
   281        double precision eps,tmin,tmax,sol(nvars+6,nsol),t,lam,zero,one,
   282  &      toler,big,l0,l1
   283        double precision tnxt,lnxt,lstart,factor
   284  c
   285  c
   286        integer ddx,grdx,grd1x,icyc,iaddc,idelc
   287        integer px,ptex,rrx,topx,zzx
   288        double precision alpha,amag,cgmag,pen,penpar,told
   289  c
   290        data zero/0.d00/
   291        data one/1.d00/
   292  c
   293  c     ////////////////  begin program  /////////////////////////
   294  c
   295  cinitialize ifl to 0
   296        ifl = 0
   297        nrql1 = nrq+nl1
   298        itend = .true.
   299        ilend = .true.
   300        ilfix = .true.
   301        nt=1
   302        tnxt=t
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 6

   303        sol(1,nt)=t
   304        lnxt=lam
   305        sol(2,nt)=lam
   306        if(.not.(t.lt.zero.or.t.gt.one))goto 23000
   307  c Note here that tmin is passed into the subroutine
   308           tmax = one - toler
   309           itend = .false.
   310           tnxt=tmin
   311           told=zero
   312           sol(1,nt)=tmin
   313  23000 continue
   314        if(.not.(lam .lt. zero))goto 23002
   315           l0 = toler
   316           l1 = (big-toler)
                  ^
**** WAR  #320:  variable "l1" set but never referenced
   317           ilend = .false.
   318           ilfix = .false.
   319           lnxt=lstart
   320           told=t
   321           sol(2,nt)=lstart
   322  23002 continue
   323        if(.not.(.not.itend.and..not.ilend))goto 23004
   324  cdon't allow both t and lam to vary
   325           ifl = 7
   326           return
   327  c
   328  cNote: penpar is assigned outside the loop as well as drql1sup
   329  c
   330  23004 continue
   331        penpar=one/lnxt**.5
   332  c     repeat
   333  23006    continue
   334           call drql1sup(nrq,nl1,neqc,niqc,nvars,ddx,grdx,grd1x,px,ptex,
   335  &         rrx,topx,zzx,icyc,ifl,e,ner,amag,cgmag,penpar,lnxt)
   336           call dnewpen(iaddc,idelc,nact,nrql1,neqc,niqc,nvars,ifl,e,ner,
   337  &         x,f,res,w(ptex),alpha,penpar,indx)
   338  c        repeat
   339  23009       continue
   340              call drql1up(iaddc,idelc,nact,nrq,nl1,neqc,niqc,nvars,icyc,
   341  &            ifl,mxs,e,ner,x,f,res,w(grdx),erql1n,pen,penpar,indx,w(zzx
        )
   342  &            ,nvars,w(ddx),w(rrx),w(topx),tnxt,eps,w(grd1x))
                         ^
**** WAR  #375:  possible incorrect modification of "nvars" (arguments #8
                 and #23) in "drql1up" call
   343  c               call dmonit(nact,neqc,niqc,nvars,icyc,psw,x,alpha,erql1
        n,pen,penpar,indx)
   344              call drql1fp(idelc,nact,nrq,nl1,neqc,niqc,nvars,ifl,e,ner,x
        ,
   345  &            f,res,w(grdx),w(px),erql1n,amag,cgmag,penpar,indx,w(zzx),
   346  &            nvars,w(ddx),w(rrx),w(topx),tnxt,big,eps)
                        ^
**** WAR  #375:  possible incorrect modification of "nvars" (arguments #7
                 and #22) in "drql1fp" call
   347              call drql1stp(iaddc,nact,nrq,nl1,neqc,niqc,nvars,ifl,e,ner,
   348  &            x,res,w(grdx),w(px),w(ptex),alpha,penpar,indx,w(topx),tnxt
        ,
   349  &            big,eps,w(grd1x),idelc)
   350  23010       if(.not.(ifl.ne.0))goto 23009
            ^
**** WAR  #315:  label "23010" declared but never used
   351           if(.not.(.not.(itend.and.ilend) .and. (ifl .ne.2 .or. cgmag+
   352  &         penpar*amag .eq. cgmag)))goto 23012
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 7

   353              call drql1nlt(nt,tmin,tmax,res,e,f,ner,indx,nact,nvars,nrq,
                                             ^
**** WAR  #596:  variable "tmax" is set to zero value by default by drql1nlt
                 in line #658
   354  &            nl1,neqc,niqc,niqc1,w(zzx),nvars,w(rrx),w(grdx),w(px),w(
                                                   ^
**** WAR  #375:  possible incorrect modification of "nvars" (arguments #10
                 and #17) in "drql1nlt" call
   355  &            topx),w(topx+nvars),ifl,idelc,iaddc,icyc,alpha,amag,cgmag,
                                                                 ^
**** ERR  #418:  argument "alpha" is real*8, but dummy argument is real*4
                 See: "drqssbc.f" line #385
   356  &            psw,penpar,nsol,sol,x,ilfix,l0,l1,tnxt,lnxt,toler,erql1n,
                                                 ^
**** WAR  #596:  variable "l0" is set to zero value by default by drql1nlt in
                 line #426
   357  &            eps,big,told,k0,factor)
                               ^
**** WAR  #596:  variable "told" is set to zero value by default by drql1nlt
                 in line #647
   358  cupdate penpar to the sqrt of next lambda
   359              penpar=one/lnxt**.5
   360              if(.not.(ifl .ne. 0))goto 23014
   361                 goto 23008
   362  23014       continue
   363              goto 23013
   364  c        else
   365  23012       continue
   366              if(.not.(ifl .ne.2 .or. cgmag+penpar*amag .eq. cgmag))goto 
        2
   367  &            3016
   368                 goto 23008
   369  23016       continue
   370  23013    continue
   371  c
   372  ccompute the effective dimensionality
   373  23007    goto 23006
            ^
**** WAR  #315:  label "23007" declared but never used
   374  23008 continue
   375        k = 0
   376        do 23018 i=1,nact
   377           if(.not.(indx(i) .le. nrq .or. (indx(i) .gt. nrq+nl1 .and. 
   378  &         indx(i) .le. nrq+nl1+neqc) .or. indx(i) .gt. nrq+nl1+neqc+
   379  &         niqc1))goto 23020
   380              k = k+1
   381  23020    continue
   382  23018    continue
   383        return
   384        end
   385        subroutine drql1nlt(nt,tmin,tmax,res,e,f,ner,indx,nact,nvars,nrq,
                                        ^
**** WAR  #315:  variable "tmin" declared but never used
   386  &      nl1,neqc,niqc,niqc1,zz,nzzr,rr,a,aa,b,bb,ifl,idelc,iaddc,icyc,
   387  &      alpha,amag,cgmag,psw,penpar,nsol,sol,x,ilfix,l0,l1,tnxt,lnxt,
                                 ^
**** WAR  #315:  variable "psw" declared but never used
   387  &      alpha,amag,cgmag,psw,penpar,nsol,sol,x,ilfix,l0,l1,tnxt,lnxt,
                                        ^
**** WAR  #315:  variable "penpar" declared but never used
   387  &      alpha,amag,cgmag,psw,penpar,nsol,sol,x,ilfix,l0,l1,tnxt,lnxt,
                                                               ^
**** WAR  #315:  variable "l1" declared but never used
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 8

   388  &      toler,erql1n,eps,big,told,k0,factor)
                  ^
**** WAR  #315:  variable "toler" declared but never used
   388  &      toler,erql1n,eps,big,told,k0,factor)
                         ^
**** WAR  #315:  variable "erql1n" declared but never used
   389  c
   390  c
   391  c     ***************
   392  c     perform parametric programming in "lambda" and "tau"
   393  c     ***************
   394  c
   395        logical fail,psw,ilfix
   396        integer nt,nact,nvars,nrq,nl1,ner,nzzr,ifl,k,nactp1
   397        integer nrql1,neqc,niqc,niqc1,nallq,nalqp1,ncols,nqnp1,ix
   398        integer idelc,iaddc,icyc,indx(1),isave,nsol,k0
   399        double precision tmin,tmax,sgn,one,res(1),zero,e(ner,1),zz(nzzr,1
        )
   400        double precision rr(1),a(1),aa(1),b(1),bb(1),thet,tnxt,tmp,sol(
   401  &      nvars+6,nsol)
   402        double precision eps,two,penpar,x(1),lnxt,lamb,l0,l1,big,toler,
   403  &      erql1n
   404        double precision test,prod,f(1),amag,cgmag,fidel,penal,wgt,told,
   405  &      factor
   406  c
   407  c
   408  c     ////////////////  begin program  /////////////////////////
   409  c
   410        data one/1.d00/
   411        data zero/0.d00/
   412        data two/2.d00/
   413  c
   414        nrql1=nrq+nl1
   415        nallq=nrql1+neqc
   416        nalqp1=nallq+1
                   ^
**** WAR  #320:  variable "nalqp1" set but never referenced
   417        ncols=nallq+niqc
   418        nqnp1=nrql1+1
                  ^
**** WAR  #320:  variable "nqnp1" set but never referenced
   419        nactp1=nact+1
   420        thet = tnxt
   421        if(.not.(ilfix))goto 23022
                            ^
**** WAR  #370:  redundant parentheses
   422           tnxt = one+eps
   423  23022 continue
   424        lamb = lnxt
   425        if(.not.(.not.ilfix))goto 23024
   426           lnxt = l0
   427  23024 continue
   428        if(.not.(ifl.eq.1.or.ifl.eq.3))goto 23026
   429           call scopy1(nvars,zero,0,a,1)
   430           call scopy1(nvars,zero,0,b,1)
   431           if(.not.(nacpt.le.ncols))goto 23028
                              ^
**** WAR  #424:  variable "nacpt" is set to zero value by default
   432              do 23030 i = nactp1,ncols 
   433                 ix = indx(i)
   434                 sgn = dsign(one,res(ix))
   435                 test = dabs(f(ix))
   436                 do 23032 j = 1,nvars 
   437                    prod = dabs(e(j,ix)*x(j))
   438                    if(.not.(prod .gt. test))goto 23034
   439                       test = prod
drqssbc.f                    Fri Apr 19 20:07:44 2002                    page 9

   440  23034             continue
   441  23032             continue
   442                 test = eps*dsqrt(dfloat(nvars))*test
   443                 if(.not.(dabs(res(ix)) .lt. test))goto 23036
   444                    sgn = zero
   445  23036          continue
   446                 if(.not.(ilfix))goto 23038
                                     ^
**** WAR  #370:  redundant parentheses
   447                    if(.not.(ix.le.nrq))goto 23040
   448                       call saxpy1(nvars,(one+sgn),e(1,ix),1,a,1)
   449                       call saxpy1(nvars,-two,e(1,ix),1,b,1)
   450                       goto 23041
   451  c                 else
   452  23040                continue
   453                       if(.not.(ix.le.nallq.or.sgn.le.zero))goto 23042
   454                          call saxpy1(nvars,sgn,e(1,ix),1,a,1)
   455  23042                continue
   456  23041             continue
   457                    goto 23039
   458  c              else
   459  23038             continue
   460                    if(.not.(ix.le.nrq))goto 23044
   461                       call saxpy1(nvars,(one-two*thet+sgn),e(1,ix),1,a,1
        )
   462                       goto 23045
   463  c                 else
   464  23044                continue
   465                       if(.not.(ix.le.nrql1))goto 23046
   466                          call saxpy1(nvars,sgn/lamb,e(1,ix),1,b,1)
   467                          goto 23047
   468  c                    else
   469  23046                   continue
   470                          if(.not.(ix.le.allq.or.sgn.le.zero))goto 23048
                                                  ^
**** WAR  #424:  variable "allq" is set to zero value by default
   471                             call saxpy1(nvars,sgn,e(1,ix),1,a,1)
   472  23048                   continue
   473  23047                continue
   474  23045             continue
   475  23039          continue
   476  23030          continue
   477  23028    continue
   478           call dzdrgnv(nvars,nact,zz,nzzr,rr,a,aa,fail,big)
   479           if(.not.(fail))goto 23050
                              ^
**** WAR  #370:  redundant parentheses
   480              ifl = 4
   481              goto 23051
   482  c        else
   483  23050       continue
   484              call dzdrgnv(nvars,nact,zz,nzzr,rr,b,bb,fail,big)
   485              if(.not.(fail))goto 23052
                                 ^
**** WAR  #370:  redundant parentheses
   486                 ifl = 4
   487                 goto 23053
   488  c           else
   489  23052          continue
   490                 do 23054 i = 1,nact 
   491                    ix = indx(i)
   492  ca check for small bb(i) is implemented to avoid floating point overflo
        w
   493                    test = dabs(f(ix))
   494                    do 23056 j = 1,nvars 
   495                       prod = dabs(e(j,ix)*x(j))
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 10

   496                       if(.not.(prod .gt. test))goto 23058
   497                          test = prod
   498  23058                continue
   499  23056                continue
   500                    test = eps*dsqrt(dfloat(nvars))*test
   501                    if(.not.(ix.le.nrq))goto 23060
   502                       if(.not.(ilfix))goto 23062
                                           ^
**** WAR  #370:  redundant parentheses
   503                          tmp = (two+aa(i))/(two-bb(i))
   504                          if(.not.(tmp.lt.tnxt.and.tmp.ge.thet))goto 2306
        4
   505                             tnxt = tmp
   506                             isave = i
   507                             goto 23065
   508  c                       else
   509  23064                      continue
   510                             tmp = aa(i)/(two-bb(i))
   511                             if(.not.(tmp.lt.tnxt.and.tmp.ge.thet))goto 2
        3
   512  &                           066
   513                                tnxt = tmp
   514  23066                      continue
   515  23065                   continue
   516                          goto 23063
   517  c                    else
   518  23062                   continue
   519                          tmp = (two*thet - aa(i))/bb(i)
   520                          if(.not.(dabs(bb(i)).lt.test))goto 23068
   521  cavoid bb near zero
   522                             tmp = big
   523  23068                   continue
   524                          if(.not.(tmp.gt.lnxt.and.tmp.lt.lamb))goto 2307
        0
   525                             lnxt = tmp
   526                             isave = i
   527                             goto 23071
   528  c                       else
   529  23070                      continue
   530                             tmp = (two*thet-two-aa(i))/bb(i)
   531                             if(.not.(dabs(bb(i)).lt.test))goto 23072
   532  cavoid bb near zero
   533                                tmp = big
   534  23072                      continue
   535                             if(.not.(tmp.gt.lnxt.and.tmp.lt.lamb))goto 2
        3
   536  &                           074
   537                                lnxt = tmp
   538                                isave = i
   539  23074                      continue
   540  23071                   continue
   541  23063                continue
   542                       goto 23061
   543  c                 else
   544  23060                continue
   545                       if(.not.(ix.le.nallq))goto 23076
   546                          if(.not.(ilfix))goto 23078
                                              ^
**** WAR  #370:  redundant parentheses
   547                             tmp = (one-aa(i))/bb(i)
   548                             if(.not.(dabs(bb(i)).lt.test))goto 23080
   549  cavoid bb near zero
   550                                tmp = big
   551  23080                      continue
   552                             if(.not.(tmp.lt.tnxt.and.tmp.ge.thet))goto 2
        3
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 11

   553  &                           082
   554                                tnxt = tmp
   555                                isave = i
   556                                goto 23083
   557  c                          else
   558  23082                         continue
   559                                tmp = -(aa(i)+one)/bb(i)
   560                                if(.not.(dabs(bb(i)).lt.test))goto 23084
   561  cavoid bb near zero
   562                                   tmp = big
   563  23084                         continue
   564                                if(.not.(tmp.lt.tnxt.and.tmp.ge.thet))
   565  &                              goto 23086
   566                                   tnxt = tmp
   567                                   isave = i
   568  23086                         continue
   569  23083                      continue
   570                             goto 23079
   571  c                       else
   572  23078                      continue
   573                             tmp = -aa(i)*lamb/(bb(i)*lamb+one)
   574                             if(.not.(tmp.gt.lnxt.and.tmp.lt.lamb))goto 2
        3
   575  &                           088
   576                                lnxt = tmp
   577                                isave = i
   578                                goto 23089
   579  c                          else
   580  23088                         continue
   581                                tmp = -aa(i)*lamb/(bb(i)*lamb-one)
   582                                if(.not.(tmp.gt.lnxt.and.tmp.lt.lamb))
   583  &                              goto 23090
   584                                   lnxt = tmp
   585                                   isave = i
   586  23090                         continue
   587  23089                      continue
   588  23079                   continue
   589                          goto 23077
   590  c                    else
   591  23076                   continue
   592                          if(.not.(ilfix))goto 23092
                                              ^
**** WAR  #370:  redundant parentheses
   593                             tmp = -aa(i)/bb(i)
   594                             if(.not.(dabs(bb(i)).lt.test))goto 23094
   595  cavoid bb near zero
   596                                tmp = big
   597  23094                      continue
   598                             if(.not.(tmp.lt.tnxt.and.tmp.ge.thet))goto 2
        3
   599  &                           096
   600                                tnxt = tmp
   601                                isave = i
   602  23096                      continue
   603                             goto 23093
   604  c                       else
   605  23092                      continue
   606                             tmp = -aa(i)/bb(i)
   607                             if(.not.(dabs(bb(i)).lt.test))goto 23098
   608  cavoid bb near zero
   609                                tmp = big
   610  23098                      continue
   611                             if(.not.(tmp.gt.lnxt.and.tmp.lt.lamb))goto 2
        3
   612  &                           100
   613                                lnxt = tmp
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 12

   614                                isave = i
   615  23100                      continue
   616  23093                   continue
   617  23077                continue
   618  23061             continue
   619  23054             continue
   620  23053       continue
   621  23051    continue
   622  c
   623  ccompute the effective dimensionalty, fidelity and penalty
   624  c
   625  23026 continue
   626        k = 0
   627        fidel = zero
   628        penal = zero
   629        do 23102 i=1,nact
   630           if(.not.(indx(i) .le. nrq .or. (indx(i) .gt. nrq+nl1 .and. 
   631  &         indx(i) .le. nrq+nl1+neqc) .or. indx(i) .gt. nrq+nl1+neqc+
   632  &         niqc1))goto 23104
   633              k = k+1
   634  cset the lower stopping criterion for lambda to be either k>=k0 or when
   635  clnxt < 0
   636  23104    continue
   637  23102    continue
   638        tmp = lnxt-lnxt*10.0d0**(factor-4.0d0)
   639        if(.not.(k.ge.k0.or.tmp.lt.zero))goto 23106
   640           l0 = lnxt+eps
   641  23106 continue
   642        do 23108 i=nactp1,ncols 
   643           ix = indx(i)
   644           tmp = res(ix)
   645           wgt = dsign(one,tmp)
   646           if(.not.(ix.le.nrq))goto 23110
   647              wgt = one-two*told+wgt
   648              fidel = fidel+wgt*tmp
   649              goto 23111
   650  c        else
   651  23110       continue
   652              if(.not.(ix.le.nrql1))goto 23112
   653                 penal = penal+dabs(tmp)
   654  23112       continue
   655  23111    continue
   656  23108    continue
   657        if(.not.(ilfix))goto 23114
                            ^
**** WAR  #370:  redundant parentheses
   658           if(.not.((ifl.eq.1.or.ifl.eq.3) .and. tnxt.lt.tmax))goto 23116
   659              nt = nt+1
   660              sol(1,nt) = tnxt
   661              sol(2,nt) = lamb
   662              sol(3,nt-1)=dble(ifl)
   663              sol(4,nt-1) = fidel
   664              sol(5,nt-1) = penal/lamb
   665              sol(6,nt-1) = k
   666              told = tnxt
   667              if(.not.(indx(isave) .le. nrql1))goto 23118
                                      ^
**** WAR  #424:  variable "isave" is set to zero value by default
   667              if(.not.(indx(isave) .le. nrql1))goto 23118
                                      ^
**** WAR  #379:  subscript expression on "indx" possibly may be out of bounds
   668                 tnxt = tnxt+10.0d0**(factor-7.0d0)*amag
   669                 goto 23119
   670  c           else
   671  23118          continue
   672                 tnxt = tnxt+10.0d0**(factor-7.0d0)*cgmag
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 13

   673  23119       continue
   674              call scopy1(nvars,x,1,sol(7,nt-1),1)
                                      ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   675              idelc = 0
   676              iaddc = nact
   677              icyc = -1
   678              ifl = 0
   679              alpha = zero
   680              goto 23117
   681  c        else
   682  23116       continue
   683              nt = nt+1
   684              if(.not.(nt.ge.nsol))goto 23120
   685                 ifl = 6
   686  23120       continue
   687              sol(1,nt) = tnxt
   688              sol(2,nt) = lamb
   689              sol(3,nt-1)=dble(ifl)
   690              sol(4,nt-1) = fidel
   691              sol(5,nt-1) = penal/lamb
   692              sol(6,nt-1) = k
   693              if(.not.((ifl.eq.1.or.ifl.eq.3) .and. tnxt .ge.tmax))goto 2
        3
   694  &            122
   695                 sol(1,nt) = one
   696                 sol(1,1) = zero
   697                 sol(4,1) = zero
   698                 sol(5,1) = zero
   699                 sol(6,1) = two
   700                 sol(2,nt) = lamb
   701                 sol(3,nt) = sol(3,nt-1)
   702                 sol(4,nt) = zero
   703                 sol(5,nt) = zero
   704                 sol(6,nt) = two
   705                 call scopy1(nvars,x,1,sol(7,nt),1)
                                         ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   706  23122       continue
   707              call scopy1(nvars,x,1,sol(7,nt-1),1)
                                      ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   708  23117    continue
   709           goto 23115
   710  c     else
   711  23114    continue
   712           if(.not.((ifl.eq.1.or.ifl.eq.3) .and. lnxt.gt.l0))goto 23124
   713              nt = nt+1
   714              sol(1,nt) = thet
   715              sol(2,nt) = lnxt
   716              sol(3,nt-1)=dble(ifl)
   717              sol(4,nt-1) = fidel
   718              sol(5,nt-1) = penal/lamb
   719              sol(6,nt-1) = k
   720              lnxt = lnxt-lnxt*10.0d0**(factor-4.0d0)
   721              call scopy1(nvars,x,1,sol(7,nt-1),1)
                                      ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   722              idelc = 0
   723              iaddc = nact
   724              icyc = -1
   725              ifl = 0
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 14

   726              alpha = zero
   727              goto 23125
   728  c        else
   729  23124       continue
   730              nt = nt+1
   731              if(.not.(nt.ge.nsol))goto 23126
   732                 ifl = 6
   733  23126       continue
   734              sol(1,nt) = thet
   735              sol(2,nt) = lnxt
   736              sol(3,nt-1)=dble(ifl)
   737              sol(4,nt-1) = fidel
   738              sol(5,nt-1) = penal/lamb
   739              sol(6,nt-1) = k
   740              if(.not.((ifl.eq.1.or.ifl.eq.3) .and. lnxt .le.l0))goto 231
        2
   741  &            8
   742                 sol(1,nt) = thet
   743                 sol(2,nt) = l0
   744                 sol(3,nt) = sol(3,nt-1)
   745                 sol(4,nt) = sol(4,nt-1)
   746                 sol(5,nt) = sol(5,nt-1)
   747                 sol(6,nt) = sol(6,nt-1)
   748                 call scopy1(nvars,x,1,sol(7,nt),1)
                                         ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   749  23128       continue
   750              call scopy1(nvars,x,1,sol(7,nt-1),1)
                                      ^
**** ERR  #325:  argument "x" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
   751  23125    continue
   752  23115 continue
   753  c remove lambda from e for next iteration
   754        if(.not.(nrql1.ge.nrq+1))goto 23130
   755           do 23132 i=nrq+1,nrql1
   756              do 23134 j=1,ner
   757                 e(j,i) = e(j,i)/lamb
   758  23134          continue
   759  23132       continue
   760  23130 continue
   761        return
   762        end
   763        subroutine drql1sup(nrq,nl1,neqc,niqc,nvars,ddx,grdx,grd1x,px,
   764  &      ptex,rrx,topx,zzx,icyc,ifl,e,ner,amag,cgmag,penpar,lam)
                                                               ^
**** WAR  #315:  variable "penpar" declared but never used
   765  c
   766        integer ddx,grdx,icyc,ifl,neqc,nrql1,ner,nrq,nl1,grd1x
   767        integer niqc,nvars,px,ptex,rrx,topx,zzx
   768        double precision amag,cgmag,e(ner,1),penpar,lam
   769  c
   770  c     ***************
   771  c     crql1  version.
   772  c
   773  c     set up the program
   774  c     parameters and indices.
   775  c     ***************
   776  c
   777  c     +++++++++++++++
   778  c     system routines  dabs
   779  c     +++++++++++++++
   780  c
   781        integer i,j,ncols,nqnp1
   782        double precision oct,tmp,zero
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 15

   783  c
   784        data oct/8.0d+00/
                     ^
**** WAR  #320:  variable "oct" set but never referenced
   785        data zero/0.0d+00/
   786  c
   787  c     /////////////////  begin program  //////////////////
   788  c
   789  c     ***************
   790  c     check validity of problem dimensions
   791  c     ***************
   792  c
   793        nrql1=nrq+nl1
   794        ncols = nrql1+neqc+niqc
   795        if(.not.(nvars.lt.1.or.neqc.lt.0.or.niqc.lt.0.or.nrql1.lt.0.or.
   796  &      ncols.lt.nvars.or.ner.lt.nvars))goto 23136
   797           ifl = 5
   798           goto 23137
   799  c     else
   800  23136    continue
   801  c
   802  c     ***************
   803  c     set up indices for the temporary storage vector  w.
   804  c     ***************
   805  c
   806           nqnp1 = nrql1+1
   807           grdx = 1
   808           grd1x = grdx+nvars
   809           px = grd1x+nvars
   810           ptex = px+nvars
   811           ddx = ptex+ncols
   812           rrx = ddx+nvars
   813           zzx = rrx+(((nvars+1)*(nvars+2))/2)
   814           topx = zzx+nvars*nvars
   815  c
   816  c     ***************
   817  c     update e with lambda only if ifl!=2, i.e. update only for the new
         lambda
   818  c     ***************
   819  c
   820           if(.not.( ifl.ne.2))goto 23138
   821              do 23140 i=nrq+1,nrql1
   822                 do 23142 j=1,ner
   823                    e(j,i)=e(j,i)*lam
   824  23142             continue
   825  23140          continue
   826  c
   827  c     ***************
   828  c     amag  is a rough estimate of the norm of  a.
   829  c     cgmag  is a rough estimate of the norm of  (g,c).
   830  c     together they are used to determine when the
   831  c     penalty parameter is too small and when the
   832  c     restricted gradient is zero.
   833  c     ***************
   834  c
   835  23138    continue
   836           amag = zero
   837           cgmag = zero
   838           if(.not.(1.le.nrql1))goto 23144
   839              do 23146 j = 1,nrql1 
   840                 tmp = zero
   841                 do 23148 i = 1,nvars
   842                    tmp = tmp+dabs(e(i,j))
   843  23148             continue
   844                 if(.not.(tmp.le.zero))goto 23150
   845                    go to 10
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 16

   846  23150          continue
   847                 if(.not.(tmp.gt.amag))goto 23152
   848                    amag = tmp
   849  23152          continue
   850  23146          continue
   851              go to 20
   852  10          ifl = 5
   853              return
   854  23144    continue
   855  20       if(.not.(nqnp1.le.ncols))goto 23154
   856              do 23156 j = nqnp1,ncols 
   857                 tmp = zero
   858                 do 23158 i = 1,nvars
   859                    tmp = tmp+dabs(e(i,j))
   860  23158             continue
   861                 if(.not.(tmp.le.zero))goto 23160
   862                    go to 30
   863  23160          continue
   864                 if(.not.(tmp.gt.cgmag))goto 23162
   865                    cgmag = tmp
   866  23162          continue
   867  23156          continue
   868              go to 40
   869  30          ifl = 5
   870              return
   871  c
   872  c     ***************
   873  c     initialize  ifl,icyc,penpar
   874  c     ***************
   875  c
   876  23154    continue
   877  40       ifl = 2
   878           icyc = -1
   879  23137 continue
   880        return
   881        end
   882        subroutine dnewpen(iaddc,idelc,nact,neqns,neqc,niqc,nvars,ifl,e,
   883  &      ner,x,f,res,pte,alpha,penpar,indx)
   884  c
   885        integer iaddc,idelc,ifl,indx(1),nact
   886        integer neqc,neqns,ner,niqc,nvars
   887        double precision alpha,e(ner,1),f(1),penpar,pte(1),res(1),x(1)
   888  c
   889  c     ***************
   890  c     cl1  version.
   891  c
   892  c     begin a round of minimization steps
   893  c     with a new penalty parameter value.
   894  c     ***************
   895  c
   896  c     +++++++++++++++
   897  c     blas  sdot1
   898  c     +++++++++++++++
   899  c
   900        integer i,ncols
   901        double precision oct,one,zero
   902  c
   903        double precision sdot1
   904  c
   905        data zero/0.0d+00/
   906        data one/1.0d+00/
                     ^
**** WAR  #320:  variable "one" set but never referenced
   907        data oct/8.0d+00/
   908  c
   909  c     /////////////////  begin program  //////////////////
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 17

   910  c
   911  c     ***************
   912  c     set penalty parameter value.
   913  c     erase record of active equation/constraints.
   914  c     ***************
   915  c
   916        if(.not.(ifl.eq.2))goto 23164
   917           ncols = neqns+neqc+niqc
   918           ifl = 0
   919           nact = 0
   920           iaddc = 0
   921           idelc = 0
   922           alpha = zero
   923           penpar = penpar/oct
   924  c
   925  c     ***************
   926  c     initialize  indx,res,pte,indx
   927  c     ***************
   928  c
   929           do 23166 i = 1,ncols 
   930              res(i) = sdot1(nvars,e(1,i),1,x,1)-f(i)
   931              pte(i) = zero
   932              indx(i) = i
   933  23166       continue
   934  23164 continue
   935        return
   936        end
   937        subroutine drql1up(iaddc,idelc,nact,nrq,nl1,neqc,niqc,nvars,icyc,
   938  &      ifl,mxs,e,ner,x,f,res,grd,erql1n,pen,penpar,indx,zz,nzzr,dd, rr,
   939  &      w,theta,eps,grd1)
   940  c
   941        integer iaddc,idelc,icyc,ifl,indx(1),mxs
   942        integer nact,neqc,nrq,nl1,ner,niqc,nvars,nzzr
   943        double precision dd(1),e(ner,1),erql1n,f(1),grd(1),pen,penpar,
   944  &      theta,grd1(1)
   945        double precision res(1),rr(1),w(1),x(1),zz(nzzr,1),eps
   946  c
   947  c     ***************
   948  c     crql1  version.
   949  c
   950  c     preparation for next minimization step.
   951  c     ***************
   952  c
   953  c     +++++++++++++++
   954  c     system routines  dabs
   955  c     +++++++++++++++
   956  c
   957        integer nallq,ncols,nrql1
   958        double precision one,zero
   959  c
   960        data one/1.0d+00/
                     ^
**** WAR  #320:  variable "one" set but never referenced
   961        data zero/0.0d+00/
                      ^
**** WAR  #320:  variable "zero" set but never referenced
   962  c
   963  c     /////////////////  begin program  //////////////////
   964  c
   965  c     ***************
   966  c     determine the active equations and active
   967  c     constraints.  compute residuals and function value.
   968  c     update the  z*d*r  decomposition.
   969  c     ***************
   970  c
   971        nrql1 = nrq+nl1
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 18

   972        nallq = nrql1+neqc
   973        ncols = nallq+niqc
   974        if(.not.(ifl.eq.0))goto 23168
   975           icyc = icyc+1
   976           if(.not.(icyc.gt.mxs))goto 23170
   977              ifl = 3
   978              goto 23171
   979  c        else
   980  23170       continue
   981              call ddelcol1(iaddc,idelc,nact,nvars,zz,nzzr,dd,rr,indx)
   982              call dresid(iaddc,nact,ncols,nvars,e,ner,x,f,res,indx,eps)
   983              call daddcol(iaddc,idelc,nact,nvars,zz,nzzr,dd,rr,e,ner,
   984  &            indx,w,eps)
   985              call drql1obj(iaddc,nact,nrq,nl1,nallq,ncols,nvars,e,ner,
   986  &            res,grd,erql1n,pen,penpar,indx,theta,grd1)
   987  23171    continue
   988  23168 continue
   989        return
   990        end
   991        subroutine drql1fp(idelc,nact,nrq,nl1,neqc,niqc,nvars,ifl,e,ner,x
        ,
   992  &      f,res,grd,p,erql1n,amag,cgmag,penpar,indx,zz,nzzr,dd,rr,w, theta
        ,
                               ^
**** WAR  #315:  variable "erql1n" declared but never used
   993  &      big,eps)
   994  c
   995        integer idelc,ifl,indx(1),nact,neqc,nrq,nl1,ner,niqc,nvars,nzzr,
   996  &      nrql1
   997        double precision amag,cgmag,dd(1),e(ner,1),erql1n,f(1),grd(1),p(1
        )
   998  &      ,penpar
   999        double precision res(1),rr(1),w(1),x(1),zz(nzzr,1),theta
  1000  c
  1001  c     ***************
  1002  c     crql1  version.
  1003  c
  1004  c     determine descent direction  p
  1005  c     (or discover optimality)
  1006  c     ***************
  1007  c
  1008  c     +++++++++++++++
  1009  c     system routines  dabs
  1010  c
  1011  c     blas  sasum1,scopy1,sscal1
  1012  c
  1013  c     eps  is the smallest positive number which
  1014  c     satisfies   (1.0 + eps) .gt. 1.0   in the
  1015  c     precision of the arithmetic being used.
  1016  c     (alternatively, for less strict zero checking,
  1017  c      eps  can be set to a user-specified tolerance.)
  1018  c     +++++++++++++++
  1019  c
  1020        integer coefx,i,ix,nallq,nalqp1,ncols,nqnp1,topx,nrql1
  1021        logical fail
  1022        double precision grdnrm,one,pnrm,prod,test,zero
  1023        double precision eps,big
  1024  c
  1025        double precision sasum1
  1026  c
  1027  c     +++++++++++++++
  1028  c     the following declarations are necessary
  1029  c     for portability when  scopy1  is used, as
  1030  c     it is below, to fill arrays with a single value
  1031  c     (one=unity  and  zero=zip  in this case).
  1032  c     +++++++++++++++
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 19

  1033  c
  1034        double precision unity(1),zip(1)
  1035        equivalence(one,unity(1)),(zero,zip(1))
  1036  c
  1037        data one/1.0d+00/
  1038        data zero/0.0d+00/
  1039  c
  1040  c     /////////////////  begin program  //////////////////
  1041  c
  1042        nrql1 = nrq+nl1
  1043        idelc = 0
  1044        if(.not.(ifl.eq.0))goto 23172
  1045           nallq = nrql1+neqc
  1046           nalqp1 = nallq+1
                      ^
**** WAR  #320:  variable "nalqp1" set but never referenced
  1047           ncols = nallq+niqc
  1048           nqnp1 = nrql1+1
  1049           coefx = 1
  1050           topx = coefx+nvars
  1051  c
  1052  c     ***************
  1053  c     project the negative of the restricted gradient
  1054  c     onto the orthogonal complement of the space
  1055  c     spanned by the active columns.
  1056  c     ***************
  1057  c
  1058           call dzdrpoc(nvars,nact,zz,nzzr,dd,grd,p,fail)
  1059           if(.not.(fail))goto 23174
                              ^
**** WAR  #370:  redundant parentheses
  1060              ifl = 4
  1061              goto 23175
  1062  c        else
  1063  23174       continue
  1064              call sscal1(nvars,-one,p,1)
  1065              pnrm = sasum1(nvars,p,1)
  1066              grdnrm = sasum1(nvars,grd,1)
                         ^
**** WAR  #320:  variable "grdnrm" set but never referenced
  1067  c
  1068  c     ***************
  1069  c     if the projection is not zero,
  1070  c     it will serve as a descent direction.
  1071  c
  1072  c     otherwise find the representation of
  1073  c     the restricted gradient as a linear
  1074  c     combination of the active columns.
  1075  c     the coefficients of the linear combination
  1076  c     are to be stored in the array  coef
  1077  c     (that is, in  w(coefx),...,w(coefx+nact-1)).
  1078  c     ***************
  1079  c
  1080              if(.not.(pnrm.le.eps*(amag*penpar+cgmag)))goto 23176
  1081                 if(.not.(nact.ne.0))goto 23178
  1082                    call dzdrgnv(nvars,nact,zz,nzzr,rr,grd,w(coefx),fail,
  1083  &                  big)
  1084                    if(.not.(fail))goto 23180
                                       ^
**** WAR  #370:  redundant parentheses
  1085                       ifl = 4
  1086                       return
  1087  c                 else
  1088  23180                continue
  1089  c
  1090  c     ***************
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 20

  1091  c     convert the coefficients of the linear
  1092  c     combination into a descent direction  p ,
  1093  c     or determine optimality.
  1094  c
  1095  c     if the optimality test is not satisfied,
  1096  c     drql1gv  will indicate an equation/constraint
  1097  c     to be deleted from activity by the value
  1098  c     of  idelc.  for optimality,  idelc=0.
  1099  c     ***************
  1100  c
  1101                       call drql1gv(idelc,nact,nvars,nrq,nl1,nallq,e,ner,
  1102  &                     grd,w(coefx),penpar,indx,theta,eps)
  1103                       pnrm = zero
  1104                       if(.not.(idelc.ne.0))goto 23182
  1105                          call dzdrgit(nvars,nact,zz,nzzr,rr,w(coefx),p,
  1106  &                        fail,w(topx),big,eps)
  1107                          if(.not.(.not.fail))goto 23184
  1108                             pnrm = sasum1(nvars,p,1)
  1109  23184                   continue
  1110                          if(.not.(fail))goto 23186
                                             ^
**** WAR  #370:  redundant parentheses
  1111                             ifl = 4
  1112                             return
  1113  23186                   continue
  1114  c
  1115  c     ***************
  1116  c     if a descent direction  p  could have been found,
  1117  c     it has been obtained by this point in the program.
  1118  c
  1119  c     check for optimality.
  1120  c
  1121  c     pnrm  has been set exactly zero
  1122  c     after the call to subroutine  drql1gv
  1123  c     if the optimality conditions are satisfied.
  1124  c     the check below has been made somewhat
  1125  c     complicated to allow for the rare event that
  1126  c     the restricted gradient is zero and no
  1127  c     columns are active,  or that the  rq  norm of
  1128  c               (a-transpose) * x - f
  1129  c     is computationally zero.
  1130  c     (the call to the subroutine  refine
  1131  c      may be omitted, if desired.)
  1132  c     ***************
  1133  c
  1134  23182                continue
  1135                       if(.not.(pnrm.gt.eps*(amag*penpar+cgmag)))goto 231
        8
  1136  &                     8
  1137                          do 23190 i = 1,nrql1 
  1138                             test = dabs(f(i))
  1139                             do 23192 ix = 1,nvars 
  1140                                prod = dabs(e(ix,i)*x(ix))
  1141                                if(.not.(prod.gt.test))goto 23194
  1142                                   test = prod
  1143  23194                         continue
  1144  23192                         continue
  1145                             if(.not.(dabs(res(i)).gt.eps*test))goto 2319
        6
  1146                                return
  1147  23196                      continue
  1148  23190                      continue
  1149  23188                continue
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 21

  1150  23181             continue
            ^
**** WAR  #315:  label "23181" declared but never used
  1151  23178          continue
  1152                 ifl = 1
  1153  c                       call drql1rf(nact,nrq,nl1,ncols,nvars,ifl,e,ner
        ,x,f,erql1n,res,indx,zz,nzzr,rr,w,theta,big,eps)
  1154                 if(.not.(ifl.eq.1))goto 23198
  1155  c
  1156  c     ***************
  1157  c     if the problem has constraints,
  1158  c     check feasibility.
  1159  c     ***************
  1160  c
  1161                    if(.not.(nqnp1.le.ncols))goto 23200
  1162                       do 23202 i = nqnp1,ncols 
  1163                          test = dabs(f(i))
  1164                          do 23204 ix = 1,nvars 
  1165                             prod = dabs(e(ix,i)*x(ix))
  1166                             if(.not.(prod.gt.test))goto 23206
  1167                                test = prod
  1168  23206                      continue
  1169  23204                      continue
  1170  c NOTE: the criterion for checking feasibility is relaxed by (eps * tes
        t)^.5
  1171  c rather than eps*test
  1172                          test = (eps*test)**.5
  1173  c                                               test = eps*test
  1174                          if(.not.(i.gt.nallq))goto 23208
  1175                             if(.not.(res(i).lt.(-test)))goto 23210
  1176                                go to 20
  1177  23210                      continue
  1178                             goto 23209
  1179  c                       else
  1180  23208                      continue
  1181                             if(.not.(dabs(res(i)).gt.test))goto 23212
  1182                                go to 10
  1183  23212                      continue
  1184  23209                   continue
  1185  23202                   continue
  1186                       return
  1187  10                   ifl = 2
  1188                       return
  1189  20                   ifl = 2
  1190  23200             continue
  1191  23198          continue
  1192  23176       continue
  1193  23175    continue
  1194  23172 continue
  1195        return
  1196        end
  1197        subroutine drql1stp(iaddc,nact,nrq,nl1,neqc,niqc,nvars,ifl,e,ner,
  1198  &      x,res,grd,p,pte,alpha,penpar,indx,alf,theta,big,eps,grd1,idelc)
  1199  c
  1200        integer iaddc,ifl,indx(1),nact,neqc,nrq,nl1,nrql1,ner,niqc,nvars,
  1201  &      idelc
  1202        double precision alpha,alf(1),e(ner,1),grd(1),p(1),grd1(1)
  1203        double precision penpar,pte(1),res(1),x(1)
  1204        double precision theta,sgn1
  1205  c
  1206  c     ***************
  1207  c     cl1  version.
  1208  c
  1209  c     piecewise linear line search.
  1210  c     ***************
  1211  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 22

  1212  c     +++++++++++++++
  1213  c     system routines dabs,dsign
  1214  c
  1215  c     blas  sasum1,saxpy1,sdot1
  1216  c
  1217  c     eps  is the smallest positive number which
  1218  c     satisfies   (1.0 + eps) .gt. 1.0   in the
  1219  c     precision of the arithmetic being used.
  1220  c     (alternatively, for less strict zero checking,
  1221  c      eps  can be set to a user-specified tolerance.)
  1222  c
  1223  c     big  is the largest positive number
  1224  c     which can be represented in the
  1225  c     precision of the arithmetic being used.
  1226  c     +++++++++++++++
  1227  c
  1228        integer i,iin,ix,jx,nactp1,nallq,ncols,num,numnac
  1229        double precision big,den,eps,grdnrm,one,pnrm,ptg,ptg1
  1230        double precision ratio,resid,tmp,two,zero
  1231  c
  1232        double precision sasum1,sdot1,etp
  1233  c
  1234        data one/1.0d+00/
  1235        data two/2.0d+00/
  1236        data zero/0.0d+00/
  1237  c
  1238  c     /////////////////  begin program  //////////////////
  1239  c
  1240  c     ***************
  1241  c     this routine determines all of the ratios  alf
  1242  c     of the form
  1243  c        -res(i)/((e(.,i)-transp)*p),
  1244  c              for  i = k+1,...,mpl
  1245  c     which are nonnegative and hence indicate distances
  1246  c     from the point  x  to breakpoints which will
  1247  c     be encountered in travel along direction  p.
  1248  c     the index vector  indx  is rearranged so that
  1249  c     its  k+1  through  num  components correspond to
  1250  c     these nonnegative ratios.
  1251  c     the results are heaped so that the  alf  values can
  1252  c     be inspected in order from smallest to largest.
  1253  c     the breakpoint  alpha  giving the minimum objective
  1254  c     function value is found, and  x  is
  1255  c     adjusted to  x + alpha*p .
  1256  c
  1257  c     the inner products  (e(.,i)-transpose)*p  are saved
  1258  c     for later use in updating the residual values.
  1259  c     ***************
  1260  c
  1261        alpha = zero
  1262        if(.not.(ifl.eq.0))goto 23214
  1263           nrql1 = nrq+nl1
  1264           nallq = nrql1+neqc
  1265           ncols = nallq+niqc
  1266           nactp1 = nact+1
  1267           num = 0
  1268           if(.not.(1.le.nact))goto 23216
  1269              do 23218 i = 1,nact 
  1270                 ix = indx(i)
  1271                 pte(ix) = sdot1(nvars,e(1,ix),1,p,1)
  1272  23218          continue
  1273  cupdate the correct gradient
  1274  23216    continue
  1275           if(.not.(nactp1.le.iaddc))goto 23220
  1276              do 23222 i = nactp1,iaddc
  1277                 ix = indx(i)
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 23

  1278                 etp = sdot1(nvars,e(1,ix),1,p,1)
  1279                 sgn1 = dsign(one,etp)
  1280                 if(.not.(ix.le.nrq))goto 23224
  1281                    sgn1 = one-two*theta + sgn1
  1282  23224          continue
  1283                 if(.not.(ix.le.nallq.or.sgn1.le.zero))goto 23226
  1284                    if(.not.(ix.le.nrql1))goto 23228
  1285                       sgn1 = sgn1*penpar
  1286  23228             continue
  1287                    call saxpy1(nvars,sgn1,e(1,ix),1,grd1,1)
  1288  23226          continue
  1289  23222          continue
  1290  23220    continue
  1291           if(.not.(idelc.ne.0))goto 23230
  1292              ix=indx(idelc)
  1293              etp=sdot1(nvars,e(1,ix),1,p,1)
  1294              sgn1=dsign(one,etp)
  1295              if(.not.(ix.le.nrq))goto 23232
  1296                 sgn1 = one-two*theta + sgn1
  1297  23232       continue
  1298              if(.not.(ix.le.nallq.or.sgn1.le.zero))goto 23234
  1299                 if(.not.(ix.le.nrql1))goto 23236
  1300                    sgn1=sgn1*penpar
  1301  23236          continue
  1302                 call saxpy1(nvars,sgn1,e(1,ix),1,grd1,1)
  1303  23234       continue
  1304  23230    continue
  1305           if(.not.(nactp1.gt.ncols))goto 23238
  1306              ifl = 1
  1307              goto 23239
  1308  c        else
  1309  23238       continue
  1310              do 23240 i = nactp1,ncols 
  1311                 ix = indx(i)
  1312                 resid = res(ix)
  1313                 den = sdot1(nvars,e(1,ix),1,p,1)
  1314                 pte(ix) = den
  1315                 if(.not.(dsign(one,resid).ne.dsign(one,den).or.resid.eq.
  1316  &               zero))goto 23242
  1317                    resid = dabs(resid)
  1318                    den = dabs(den)
  1319                    if(.not.(den.lt.one))goto 23244
  1320                       if(.not.(resid.ge.den*big))goto 23246
  1321                          goto 23240
  1322  23246                continue
  1323  23244             continue
  1324                    ratio = resid/den
  1325                    num = num+1
  1326                    numnac = num+nact
  1327                    jx = indx(numnac)
  1328                    indx(numnac) = ix
  1329                    indx(i) = jx
  1330                    alf(num) = ratio
  1331  23242          continue
  1332  23240          continue
  1333              if(.not.(num.le.0))goto 23248
  1334                 ifl = 2
  1335                 goto 23249
  1336  c           else
  1337  23248          continue
  1338  c
  1339  c     ***************
  1340  c     heap the positive ratios
  1341  c     ***************
  1342  c
  1343                 call ddkheap(.true.,num,indx(nactp1),alf)
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 24

  1344  c
  1345  c     ***************
  1346  c     travel along  p  until no further decrease in the
  1347  c     penalty function is possible
  1348  c     ***************
  1349  c
  1350                 iin = num
  1351                 ptg = sdot1(nvars,grd,1,p,1)
                         ^
**** WAR  #320:  variable "ptg" set but never referenced
  1352                 ptg1 = sdot1(nvars,grd1,1,p,1)
  1353                 pnrm = sasum1(nvars,p,1)
  1354                 grdnrm = sasum1(nvars,grd1,1)
  1355                 do 23250 i = 1,num 
  1356                    ix = indx(nactp1)
  1357                    if(.not.(res(ix).eq.zero))goto 23252
  1358                       tmp = zero
  1359                       goto 23253
  1360  c                 else
  1361  23252                continue
  1362                       tmp = -dsign(one,res(ix))
  1363  23253             continue
  1364                    if(.not.(ix.le.nallq))goto 23254
  1365                       tmp = tmp*two
  1366  23254             continue
  1367                    if(.not.(ix.le.nrql1))goto 23256
  1368                       tmp = tmp*penpar
  1369  23256             continue
  1370                    ptg1 = ptg1+tmp*pte(ix)
  1371                    if(.not.(ptg1.ge.(-eps)*grdnrm*pnrm))goto 23258
  1372                       go to 140
  1373  23258             continue
  1374                    call ddkheap(.false.,iin,indx(nactp1),alf)
  1375  23250             continue
  1376                 ifl = 2
  1377                 return
  1378  140            iaddc = nactp1
  1379  c
  1380  c     ***************
  1381  c     adjust  x  to  x + alpha*p
  1382  c     ***************
  1383  c
  1384                 alpha = alf(1)
  1385                 call saxpy1(nvars,alpha,p,1,x,1)
  1386  23249       continue
  1387  23239    continue
  1388  23214 continue
  1389        return
  1390        end
  1391        subroutine drql1rf(nact,nrq,nl1,ncols,nvars,ifl,e,ner,x,f,erql1n,
  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                     ^
**** WAR  #315:  array "indx" declared but never used
  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                        ^
**** WAR  #315:  array "zz" declared but never used
  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                                ^
**** WAR  #315:  array "rr" declared but never used
  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                                  ^
**** WAR  #315:  array "w" declared but never used
  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                                            ^
**** WAR  #315:  variable "big" declared but never used
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 25

  1392  &      res,indx,zz,nzzr,rr,w,theta,big,eps)
                                                ^
**** WAR  #315:  variable "eps" declared but never used
  1393  c
  1394        integer ifl,indx(1),nact,ncols,nrq,nl1,ner,nvars,nzzr,nrql1
  1395        double precision e(ner,1),erql1n,f(1),res(1),rr(1),w(1),x(1),zz(
  1396  &      nzzr,1)
  1397        double precision theta, wgt
  1398  c
  1399  c     ***************
  1400  c     a routine for refining the solution
  1401  c     produced by  crql1.
  1402  c
  1403  c     (this routine may be omitted if desired.)
  1404  c     ***************
  1405  c
  1406  c     +++++++++++++++
  1407  c     system routines  dabs
  1408  c
  1409  c     blas  sdot1
  1410  c     +++++++++++++++
  1411  c
  1412  c#integer i,ix
  1413        logical fail
  1414        double precision tmp,zero,one,two
  1415  c
  1416        double precision sdot1,big,eps
  1417  c
  1418        data zero/0.0d+00/
  1419        data one/1.0d+00/
  1420        data two/2.0d+00/
  1421  c
  1422  c     /////////////// begin program ///////////////
  1423  c
  1424        nrql1 = nrq+nl1
  1425        if(.not.(nact.ne.0))goto 23260
  1426           if(.not.(fail))goto 23262
                             ^
**** WAR  #424:  variable "fail" is set to zero value by default
  1426           if(.not.(fail))goto 23262
                              ^
**** WAR  #370:  redundant parentheses
  1427              ifl = 4
  1428              goto 23263
  1429  c        else
  1430  23262       continue
  1431              erql1n = zero
  1432              do 23264 i = 1,ncols 
  1433                 tmp = sdot1(nvars,e(1,i),1,x,1)-f(i)
  1434                 wgt = dsign(one,tmp)
  1435                 if(.not.(i.le.nrq))goto 23266
  1436                    wgt = one-two*theta+wgt
  1437  23266          continue
  1438                 res(i) = tmp
  1439                 if(.not.(i.le.nrql1))goto 23268
  1440                    erql1n = erql1n+wgt*tmp
  1441  23268          continue
  1442  23264          continue
  1443  23263    continue
  1444  23260 continue
  1445        return
  1446        end
  1447  c
  1448  c     ---------------
  1449  c     third level subroutines --
  1450  c          ddelcol1,dresid,addcol,drql1obj,getv
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 26

  1451  c     ---------------
  1452  c
  1453        subroutine ddelcol1(iaddc,idelc,nact,nrow,zz,nzzr,dd,rr,indx)
  1454  c
  1455        integer indx(1),nzzr,nact,idelc,iaddc,nrow
  1456        double precision dd(1),rr(1),zz(nzzr,1)
  1457  c
  1458  c     ***************
  1459  c     cl1  version of  ddelcol1.
  1460  c
  1461  c     this routine administers the deletion of the column
  1462  c     indicated by the value of idelc
  1463  c     from an  nrow by nact   z*d*r   decomposition.
  1464  c     note that the value of idelc
  1465  c     is the number of a column in the decomposition
  1466  c     rather than a number which refers to
  1467  c     a column in the matrix  e.
  1468  c     (the  e-column  numbers corresponding to
  1469  c     the columns of the factorization are to be
  1470  c     found in   indx(1),...,indx(nact) .
  1471  c     the contents of   indx(nact+1),...,indx(iaddc)
  1472  c     indicate columns of  e  which are slated for
  1473  c     addition to the decomposition.)
  1474  c     the vector  indx   is rearranged by
  1475  c     permuting the element which corresponds to
  1476  c     the deletion out to the   iaddc-th  position.
  1477  c     nact  and  iaddc  are decreased accordingly.
  1478  c     ***************
  1479  c
  1480        integer i,idlp1,ixdlc
  1481        logical fail
  1482  c
  1483  c     /////////////////  begin program  //////////////////
  1484  c
  1485        if(.not.(idelc.ne.0))goto 23270
  1486           idlp1 = idelc+1
  1487           ixdlc = indx(idelc)
  1488           do 23272 i = idlp1,iaddc
  1489              indx(i-1) = indx(i)
  1490  23272       continue
  1491           indx(iaddc) = ixdlc
  1492           iaddc = iaddc-1
  1493           call dzdrcou(nrow,nact,zz,nzzr,dd,rr,idelc,fail)
                                                               ^
**** WAR  #320:  variable "fail" set but never referenced
  1494           idelc = ixdlc
  1495  23270 continue
  1496        return
  1497        end
  1498        subroutine dresid(iaddc,nact,ncols,nvars,e,ner,x,f,res,indx,eps)
  1499  c
  1500        integer iaddc,indx(1),nact,ncols,ner,nvars
  1501        double precision e(ner,1),f(1),res(1),x(1)
  1502  c
  1503  c
  1504  c     ***************
  1505  c     compute the residuals
  1506  c          (e(.,ix)-transp)*x - f(ix)  .
  1507  c     the residuals are stored in the array  res.
  1508  c     indx  is rearranged so that the zero residuals
  1509  c     correspond to  indx(1),...,indx(iaddc)  .
  1510  c     ***************
  1511  c
  1512  c     +++++++++++++++
  1513  c     system routines  dabs,idint,dfloat,dsqrt
  1514  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 27

  1515  c     blas  sdot1
  1516  c
  1517  c     eps  is the smallest positive number which
  1518  c     satisfies   (1.0 + eps) .gt. 1.0   in the
  1519  c     precision of the arithmetic being used.
  1520  c     (alternatively, for less strict zero checking,
  1521  c      eps  can be set to a user-specified tolerance.)
  1522  c     +++++++++++++++
  1523  c
  1524        integer i,iadp1,idummy,irand,ix,j,nactp1
  1525        double precision eps,prod,temp,test,tol,zero
  1526  c
  1527        double precision sdot1,dunif01
  1528  c
  1529        data zero/0.0d+00/
  1530  c
  1531  c     /////////////////  begin program  //////////////////
  1532  c
  1533  ctol = eps*dsqrt(dfloat(nvars))
  1534        tol = eps
  1535        nactp1 = nact+1
  1536        if(.not.(1.le.iaddc))goto 23274
  1537  c
  1538  c     ***************
  1539  c     zero out all residuals known to be zero.
  1540  c     ***************
  1541  c
  1542           do 23276 i = 1,iaddc 
  1543              ix = indx(i)
  1544              res(ix) = zero
  1545  23276       continue
  1546  c
  1547  c     ***************
  1548  c     compute the remaining residuals.
  1549  c     detect any more residuals which
  1550  c     are computationally zero, and
  1551  c     set them exactly zero.  their
  1552  c     associated indices are permuted
  1553  c     so that they are stored in
  1554  c     indx(nact+1),...,nact(iaddc).
  1555  c
  1556  c     (a fairly tight zero check is used.
  1557  c     it is far less expensive in running
  1558  c     time to neglect an extra zero
  1559  c     residual than to accept it and risk
  1560  c     invoking the anti-cycling
  1561  c     mechanisms in the program.
  1562  c     the accuracy of the solution as
  1563  c     finally determined is not affected.)
  1564  c     ***************
  1565  c
  1566  23274 continue
  1567        iadp1 = iaddc+1
  1568        if(.not.(iadp1.le.ncols))goto 23278
  1569           do 23280 i = iadp1,ncols 
  1570              ix = indx(i)
  1571              temp = sdot1(nvars,e(1,ix),1,x,1)-f(ix)
  1572              test = dabs(f(ix))
  1573              do 23282 j = 1,nvars 
  1574                 prod = dabs(e(j,ix)*x(j))
  1575                 if(.not.(prod.gt.test))goto 23284
  1576                    test = prod
  1577  23284          continue
  1578  23282          continue
  1579              test = tol*test
  1580              if(.not.(dabs(temp).gt.test))goto 23286
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 28

  1581                 res(ix) = temp
  1582                 goto 23287
  1583  c           else
  1584  23286          continue
  1585                 iaddc = iaddc+1
  1586                 indx(i) = indx(iaddc)
  1587                 indx(iaddc) = ix
  1588                 res(ix) = zero
  1589  23287       continue
  1590  23280       continue
  1591  c
  1592  c     ***************
  1593  c     if any new zero residuals have
  1594  c     been found, randomize their
  1595  c     ordering as an anti-cycling
  1596  c     device for  addcol.
  1597  c     ***************
  1598  c
  1599  23278 continue
  1600        if(.not.(iaddc.gt.nactp1))goto 23288
  1601           do 23290 i = nactp1,iaddc 
  1602              irand = i+ifix(float(iaddc-i+1)*sngl(dunif01(0,idummy)))
  1603              ix = indx(irand)
  1604              indx(irand) = indx(i)
  1605              indx(i) = ix
  1606  23290       continue
  1607  23288 continue
  1608        return
  1609        end
  1610        subroutine daddcol(iaddc,idelc,nact,nvars,zz,nzzr,dd,rr,e,ner,
  1611  &      indx,w,eps)
  1612  c
  1613        integer iaddc,idelc,indx(1),nact,ner,nvars,nzzr
  1614        double precision dd(1),e(ner,1),rr(1)
  1615        double precision w(1),zz(nzzr,1)
  1616        double precision eps
  1617  c
  1618  c     ***************
  1619  c     cl1 version of addcol.
  1620  c
  1621  c     this routine administers the adjustment of the
  1622  c     z*d*r   decomposition for any new zero residuals.
  1623  c     the data corresponding to the zero residuals is indexed
  1624  c     in  indx(nact+1),...,indx(iaddc).
  1625  c     ***************
  1626  c
  1627  c     +++++++++++++++
  1628  c     blas  sasum1
  1629  c
  1630  c     eps  is the smallest positive number which
  1631  c     satisfies   (1.0 + eps) .gt. 1.0   in the
  1632  c     precision of the arithmetic being used.
  1633  c     (alternatively, for less strict zero checking,
  1634  c      eps  can be set to a user-specified tolerance.)
  1635  c     +++++++++++++++
  1636  c
  1637        integer i,istrt,ix,nactp1,topx
  1638        logical fail
  1639        double precision colnrm,prjnrm
  1640  c
  1641        double precision sasum1
  1642  c
  1643  c
  1644  c     /////////////////  begin program  //////////////////
  1645  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 29

  1646        topx = nvars+1
                 ^
**** WAR  #320:  variable "topx" set but never referenced
  1647        istrt = nact+1
  1648        if(.not.(istrt.le.iaddc))goto 23292
  1649  c
  1650  c     ***************
  1651  c     candidates for addition to the  z*d*r
  1652  c     factorization are inspected in random
  1653  c     order to hinder cycling.
  1654  c     the randomization was carried out by  resid.
  1655  c
  1656  c     if a candidate has just been released
  1657  c     from the factorization or is dependent upon the
  1658  c     columns in the factorization,
  1659  c     then it is omitted from addition.
  1660  c
  1661  c     upon exit, indices of such omitted
  1662  c     columns are to be found in
  1663  c          indx(nact+1),...,indx(iaddc) .
  1664  c     ***************
  1665  c
  1666           do 23294 i = istrt,iaddc 
  1667              nactp1 = nact+1
  1668              ix = indx(i)
  1669              call dzdrpoc(nvars,nact,zz,nzzr,dd,e(1,ix),w,fail)
                                                                    ^
**** WAR  #320:  variable "fail" set but never referenced
  1670              colnrm = sasum1(nvars,e(1,ix),1)
  1671              prjnrm = sasum1(nvars,w,1)
  1672              if(.not.(prjnrm.gt.eps*colnrm.and.ix.ne.idelc))goto 23296
  1673                 indx(i) = indx(nactp1)
  1674                 indx(nactp1) = ix
  1675                 call dzdrcin(nvars,nact,zz,nzzr,dd,rr,e(1,ix),fail,w)
  1676  23296       continue
  1677  23294       continue
  1678  23292 continue
  1679        return
  1680        end
  1681        subroutine drql1obj(iaddc,nact,nrq,nl1,nallq,ncols,nvars,e,ner,
  1682  &      res,grd,erql1n,pen,penpar,indx,theta,grd1)
  1683  c
  1684        integer iaddc,indx(1),nact,nallq,nrq,nl1,ncols,ner,nvars,nrql1
  1685        double precision e(ner,1),erql1n,grd(1),pen,penpar,res(1),theta,
  1686  &      grd1(1)
  1687  c
  1688  c     ***************
  1689  c     crql1 version of object.
  1690  c
  1691  c     this routine administers the evaluation of the
  1692  c     penalty (objective) function given the equation
  1693  c     and constraint residuals.  it also computes the
  1694  c     restricted gradient of the function.
  1695  c
  1696  c     columns which are not in the  z*d*r factorization
  1697  c     but which are associated with zero residuals must
  1698  c     be included in the restricted gradient with random
  1699  c     signs as an anti-cycling device.
  1700  c     the indices of these columns are to be
  1701  c     found in  indx(nact+1),...,indx(iaddc)
  1702  c     ***************
  1703  c
  1704  c     +++++++++++++++
  1705  c     system routines  dabs,dsign
  1706  c
  1707  c     blas  saxpy1,scopy1
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 30

  1708  c     +++++++++++++++
  1709  c
  1710        integer i,idummy,ix,nactp1
  1711        double precision half,one,two,three,tmp,zero,wgt,wgt1
  1712  c
  1713        double precision dunif01
  1714  c
  1715  c     +++++++++++++++
  1716  c     the following declarations are necessary
  1717  c     for portability when  scopy1  is used, as
  1718  c     it is below, to fill arrays with a single
  1719  c     value  (zero=zip  in this case).
  1720  c     +++++++++++++++
  1721  c
  1722        double precision zip(1)
  1723        equivalence(zero,zip(1))
  1724  c
  1725        data half/0.5d+00/
                      ^
**** WAR  #320:  variable "half" set but never referenced
  1726        data one/1.0d+00/
  1727        data two/2.0d+00/
  1728        data three/3.0d+00/
  1729        data zero/0.0d+00/
  1730  c
  1731  c     /////////////////  begin program  //////////////////
  1732  c
  1733        nrql1 = nrq+nl1
  1734        nactp1 = nact+1
  1735        erql1n = zero
  1736        pen = zero
  1737        call scopy1(nvars,zip,0,grd,1)
                                  ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  1738        call scopy1(nvars,zip,0,grd1,1)
                                  ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  1739        if(.not.(nactp1.le.ncols))goto 23298
  1740           do 23300 i = nactp1,ncols 
  1741              ix = indx(i)
  1742              tmp = res(ix)
  1743              wgt = dsign(one,tmp)
  1744              wgt1 = wgt
  1745              if(.not.(i.le.iaddc))goto 23302
  1746                 wgt1 = dunif01(0,idummy)
  1747                 if(.not.(wgt1 .lt. one/three))goto 23304
  1748                    wgt = -one
  1749                    goto 23305
  1750  c              else
  1751  23304             continue
  1752                    if(.not.(wgt1 .gt. two/three))goto 23306
  1753                       wgt = one
  1754                       goto 23307
  1755  c                 else
  1756  23306                continue
  1757                       wgt = zero
  1758  23307             continue
  1759  23305          continue
  1760  23302       continue
  1761              if(.not.(ix.le.nrq))goto 23308
  1762                 wgt = one-two*theta+wgt
  1763                 wgt1 = wgt
  1764  23308       continue
  1765              if(.not.(i.le.iaddc))goto 23310
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 31

  1766                 wgt1 = zero
  1767  23310       continue
  1768              if(.not.(ix.le.nallq.or.wgt.le.zero))goto 23312
  1769  cwhy <= zero?
  1770                 if(.not.(wgt1 .ne. zero))goto 23314
  1771                    if(.not.(ix.le.nrql1))goto 23316
  1772                       erql1n = erql1n+tmp*wgt
  1773                       tmp = tmp*penpar
  1774  23316             continue
  1775                    pen = pen+tmp*wgt
  1776  23314          continue
  1777                 if(.not.(ix.le.nrql1))goto 23318
  1778                    wgt = wgt*penpar
  1779                    wgt1 = wgt1*penpar
  1780  23318          continue
  1781                 call saxpy1(nvars,wgt,e(1,ix),1,grd,1)
  1782                 call saxpy1(nvars,wgt1,e(1,ix),1,grd1,1)
  1783  23312       continue
  1784  23300       continue
  1785  23298 continue
  1786        return
  1787        end
  1788        subroutine drql1gv(idelc,nact,nvars,nrq,nl1,nallq,e,ner,grd,coef,
  1789  &      penpar,indx,theta,eps)
  1790  c
  1791        integer idelc,indx(1),nact,nallq,nrq,nl1,ner,nvars,nrql1
  1792        double precision coef(1),e(ner,1),grd(1),penpar,theta
  1793  c
  1794  c     ***************
  1795  c     crql1  version.
  1796  c
  1797  c     set up the right-hand-side vector
  1798  c     (and store in the array  coef)
  1799  c     for the linear problem which determines
  1800  c     a descent direction  p  in the case where
  1801  c     the projection of the restricted gradient is zero.
  1802  c     ***************
  1803  c
  1804  c     +++++++++++++++
  1805  c     system routines  dabs,dfloat,idint,dsign
  1806  c
  1807  c     blas  saxpy1
  1808  c
  1809  c     eps  is the smallest positive number which
  1810  c     satisfies   (1.0 + eps) .gt. 1.0   in the
  1811  c     precision of the arithmetic being used.
  1812  c     (alternatively, for less strict zero checking,
  1813  c      eps  can be set to a user-specified tolerance.)
  1814  c     +++++++++++++++
  1815  c
  1816        integer i,idummy,irand,ix
  1817        double precision cf,eps,one,ope,s,tmp,tmpsav,zero,two
  1818  c
  1819        double precision dunif01
  1820  c
  1821        data one/1.0d+00/
  1822        data two/2.0d+00/
  1823        data zero/0.0d+00/
  1824  c
  1825  c     /////////////////  begin program  //////////////////
  1826  c
  1827  c     ***************
  1828  c     find the most out-of-kilter
  1829  c     coefficient.  begin inspecting
  1830  c     the coefficients at a random index
  1831  c     to hinder cycling.  set  coef
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 32

  1832  c     to zero on the fly.
  1833  c     ***************
  1834  c
  1835        nrql1 = nrq+nl1
  1836        ope = one+eps
  1837        idelc = 0
  1838        tmpsav = zero
  1839        if(.not.(1.le.nact))goto 23320
  1840           irand = ifix(float(nact)*sngl(dunif01(0,idummy)))
  1841           do 23322 i = 1,nact 
  1842              irand = irand+1
  1843              if(.not.(irand.gt.nact))goto 23324
  1844                 irand = 1
  1845  23324       continue
  1846              ix = indx(irand)
  1847              cf = coef(irand)
  1848              coef(irand) = zero
  1849              if(.not.(ix.gt.nallq))goto 23326
  1850                 tmp = cf+eps
  1851                 goto 23327
  1852  c           else
  1853  23326          continue
  1854                 if(.not.(ix.le.nrql1))goto 23328
  1855                    cf = cf/penpar
  1856  23328          continue
  1857                 tmp = ope-dabs(cf)
  1858                 if(.not.(ix.le.nrq))goto 23330
  1859                    tmp = tmp+dsign(one,cf)*(-one+two*theta)
  1860  23330          continue
  1861  23327       continue
  1862              if(.not.(tmp.lt.tmpsav))goto 23332
  1863  c? what about w_nu >1
  1864                 idelc = irand
  1865                 s = dsign(one,cf)
  1866                 tmpsav = tmp
  1867  23332       continue
  1868  23322       continue
  1869  c
  1870  c     ***************
  1871  c     if no coefficients are out of kilter,
  1872  c     then return.  otherwise set a
  1873  c     value in an appropriate component
  1874  c     (indicated by  idelc)  of  coef
  1875  c     and adjust the restricted gradient
  1876  c     if necessary.
  1877  c     ***************
  1878  c
  1879           if(.not.(idelc.ne.0))goto 23334
  1880              coef(idelc) = -s
                                   ^
**** WAR  #424:  variable "s" is set to zero value by default
  1881              ix = indx(idelc)
  1882              if(.not.(ix.le.nallq))goto 23336
  1883                 tmp = -s
  1884                 if(.not.(ix.le.nrql1))goto 23338
  1885                    tmp = tmp*penpar
  1886  23338          continue
  1887                 if(.not.(ix.le.nrq))goto 23340
  1888                    tmp = tmp+(one-two*theta)*penpar
  1889  23340          continue
  1890                 call saxpy1(nvars,tmp,e(1,ix),1,grd,1)
  1891  23336       continue
  1892  23334    continue
  1893  23320 continue
  1894        return
  1895        end
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 33

  1896  c
  1897  c     ---------------
  1898  c     fourth level subroutines --
  1899  c               ddkheap,dunif01,dzdrcin,dzdrcou,
  1900  c               dzdrgit,dzdrgnv,dzdrpoc
  1901  c     ---------------
  1902  c
  1903        subroutine ddkheap(make,ir,indx,aray)
  1904  c
  1905        integer indx(1),ir
  1906        logical make
  1907        double precision aray(1)
  1908  c
  1909  c     ***************
  1910  c     an adaptation of d. e. knuth,s heaping
  1911  c     routines (see volume 3 of
  1912  c          the art of computer programming  ).
  1913  c     if  make  is  .true.,  the full heap building
  1914  c     process is carried out on
  1915  c          aray(1),...,aray(ir) ,
  1916  c     and the value of  ir  is unchanged.
  1917  c     if  make  is  .false.,  one step of the sorting
  1918  c     process is carried out to provide the next
  1919  c     element of  aray  in order,  and the variable
  1920  c     ir  is decreased by one.  the interruption of the
  1921  c     sorting phase is built in via the flag  once.
  1922  c     indx  is an index vector associated with
  1923  c     aray  which must be rearranged in parallel
  1924  c     with it.
  1925  c     ***************
  1926  c
  1927        integer i,il,it,j
  1928        logical once
  1929        double precision t
  1930  c
  1931  c     /////////////////  begin program  //////////////////
  1932  c
  1933        if(.not.(ir.gt.1))goto 23342
  1934  c
  1935  c     ***************
  1936  c     test whether or not the initial
  1937  c     heap is to be built
  1938  c     ***************
  1939  c
  1940           il = 1
  1941           if(.not.(make))goto 23344
                              ^
**** WAR  #370:  redundant parentheses
  1942              il = (ir/2)+1
  1943  23344    continue
  1944           once = .false.
  1945  c        repeat
  1946  23346       continue
  1947              if(.not.(il.gt.1))goto 23349
  1948  c
  1949  c     ***************
  1950  c     the heap-building phase uses this branch
  1951  c     ***************
  1952  c
  1953                 il = il-1
  1954                 it = indx(il)
                                  ^
**** WAR  #379:  subscript expression on "indx" possibly may be out of bounds
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 34

  1955                 t = aray(il)
                                 ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  1956                 goto 23350
  1957  c           else
  1958  23349          continue
  1959  c
  1960  c     ***************
  1961  c     the sorting phase uses this branch
  1962  c     ***************
  1963  c
  1964                 if(.not.(make.or.once))goto 23351
  1965                    return
  1966  23351          continue
  1967                 once = .true.
  1968                 it = indx(ir)
  1969                 t = aray(ir)
  1970                 indx(ir) = indx(1)
  1971                 aray(ir) = aray(1)
  1972                 ir = ir-1
  1973                 if(.not.(ir.le.1))goto 23353
  1974                    goto 23348
  1975  23353          continue
  1976  23350       continue
  1977  c
  1978  c     ***************
  1979  c     the remaining statements are common
  1980  c     to both phases and embody the
  1981  c     heap-rectifying (sifting) section
  1982  c     ***************
  1983  c
  1984              j = il
  1985  c           repeat
  1986  23355          continue
  1987                 i = j
  1988                 j = 2*j
  1989                 if(.not.(j.lt.ir))goto 23358
  1990                    if(.not.(aray(j).gt.aray(j+1)))goto 23360
                                        ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  1990                    if(.not.(aray(j).gt.aray(j+1)))goto 23360
                                                     ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  1991                       j = j+1
  1992  23360             continue
  1993                    goto 23359
  1994  c              else
  1995  23358             continue
  1996                    if(.not.(j.ne.ir))goto 23362
  1997                       goto 23357
  1998  23362             continue
  1999  23359          continue
  2000                 if(.not.(t.le.aray(j)))goto 23364
                                          ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  2001                    goto 23357
  2002  23364          continue
  2003                 indx(i) = indx(j)
                            ^
**** WAR  #379:  subscript expression on "indx" possibly may be out of bounds
  2003                 indx(i) = indx(j)
                                      ^
**** WAR  #379:  subscript expression on "indx" possibly may be out of bounds
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 35

  2004                 aray(i) = aray(j)
                            ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  2004                 aray(i) = aray(j)
                                      ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  2005  23356          goto 23355
            ^
**** WAR  #315:  label "23356" declared but never used
  2006  23357       continue
  2007              indx(i) = it
                         ^
**** WAR  #379:  subscript expression on "indx" possibly may be out of bounds
  2008              aray(i) = t
                         ^
**** WAR  #379:  subscript expression on "aray" possibly may be out of bounds
  2009  23347       goto 23346
            ^
**** WAR  #315:  label "23347" declared but never used
  2010  23348    continue
  2011           indx(1) = it
  2012           aray(1) = t
  2013           goto 23343
  2014  c     else
  2015  23342    continue
  2016           if(.not.(.not.make))goto 23366
  2017              ir = 0
  2018  23366    continue
  2019  23343 continue
  2020        return
  2021        end
  2022        double precision function dunif01(iseed,ix)
  2023  c
  2024        integer iseed,ix,ix0
  2025  c
  2026        data ix0/2/
  2027  c
  2028  c     +++++++++++++++
  2029  c     system routines  dfloat,mod
  2030  c     +++++++++++++++
  2031  c
  2032  c     --------------------------------------------------------------
  2033  c     --------------------------------------------------------------
  2034  c
  2035  c     *****purpose-
  2036  c     this function returns a pseudo-random number distributed
  2037  c     uniformly in the interval (0,1).
  2038  c
  2039  c     *****parameter description-
  2040  c     on input-
  2041  c
  2042  c     iseed,  if it is nonzero modulo 9973, becomes the
  2043  c          new seed, i.e. it replaces the internally stored
  2044  c          value of ix0.  on machines where fortran variables
  2045  c          retain their values between calls, the internally
  2046  c          stored value if ix0 is the value assigned to  ix  in
  2047  c          the previous invocation of  dunif01.  otherwise -- and
  2048  c          in the first call to  dunif01 --  ix0=2.
  2049  c
  2050  c     on output-
  2051  c
  2052  c     ix is the next integer in a pseudo-random sequence of
  2053  c          integers between  1  and  9972  and is generated from its
  2054  c          predecessor  ix0  (i.e.  from  iseed,  if  iseed  is nonzero
  2055  c          modulo 9973).  ix  is the value which  iseed  should have
  2056  c          in the next invocation of  dunif01  to get the next
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 36

  2057  c          pseudo-random number.  the caller will often pass the
  2058  c          same variable for  iseed  as for  ix,
  2059  c          e.g.  x = dunif01(ix,ix).
  2060  c
  2061  c     *****application and usage restrictions-
  2062  c     dunif01  should only be used when portability is important and a
  2063  c     course random number generator suffices.  applications requiring
  2064  c     a fine, high precison generator should use one with a much
  2065  c     larger modulus.
  2066  c
  2067  c     *****algorithm notes-
  2068  c     dunif01 will run on any machine having at least 20 bits of ac-
  2069  c     curacy for fixed-point arithmitic.  it is based on a generator
  2070  c     recommended in (3), which passes the spectral test with flying
  2071  c     colors -- see (1) and (2).
  2072  c
  2073  c     references-
  2074  c     (1) hoaglin, d.c. (1976), theoretical properties of congruential
  2075  c     random-number generators-  an empirical view,
  2076  c     memorandum ns-340, dept. of statistics, harvard univ.
  2077  c
  2078  c     (2) knuth, d.e. (1969), the art of computer programming, vol. 2
  2079  c     (seminumerical algorithms), addison-wesley, reading, mass.
  2080  c
  2081  c     (3) smith, c.s. (1971), multiplicative pseudo-random number
  2082  c     generators with prime modulus, j. assoc. comput. mach. 18,
  2083  c     pp. 586-593.
  2084  c
  2085  c     *****general-
  2086  c
  2087  c     this subroutine was written in connection with research
  2088  c     supported by the national science foundation under grants
  2089  c     mcs-7600324, dcr75-10143, 76-14311dss, and mcs76-11989.
  2090  c
  2091  c     permission for the use of  dunif01  in  cl1  was
  2092  c     generously given by  v. klema  and  d. hoaglin.
  2093  c
  2094  c     --------------------------------------------------------------
  2095  c     --------------------------------------------------------------
  2096  c
  2097        if(.not.(iseed.ne.0))goto 23368
  2098           ix = mod(iseed,99730)
  2099           if(.not.(ix.ne.0))goto 23370
  2100              ix0 = ix
  2101  23370    continue
  2102  c  ***
  2103  c  in order that all fixed-point calculations require only 20 bit
  2104  c  arithmetic, we use two calls to  mod  to compute
  2105  c  ix0 = mod(3432*ix0, 9973).
  2106  c  ***
  2107  23368 continue
  2108        ix0 = mod(52*mod(66*ix0,99730),99730)
  2109        ix = ix0
  2110        dunif01 = dfloat(ix0)/99730.0d+00
  2111        return
  2112        end
  2113        subroutine dzdrcin(n,k,zz,nzzr,dd,rr,col,fail,w)
  2114  c
  2115        integer k,n,nzzr
  2116        logical fail
  2117        double precision col(1),dd(1),rr(1),w(1),zz(nzzr,1)
  2118  c
  2119  c     ***************
  2120  c     prepared by richard bartels
  2121  c     the university of waterloo
  2122  c     computer science department
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 37

  2123  c     latest update .... 30 november, 1979.
  2124  c
  2125  c     given the factorization
  2126  c
  2127  c          zz*dd*rr
  2128  c
  2129  c     of some  n by k  matrix
  2130  c
  2131  c       (0 .le. k .lt. n)
  2132  c         (n .ge. 1),
  2133  c
  2134  c     where
  2135  c
  2136  c          (zz-transp)*(zz) = (dd-inv),
  2137  c          dd  is diagonal and nonsingular,
  2138  c     and
  2139  c          rr  has zeros below the diagonal,
  2140  c
  2141  c     and given a  (k+1)th  column
  2142  c     to be addedto the original matrix,
  2143  c     this program updates  zz,dd and rr.
  2144  c
  2145  c     the value of  k  is increased by one.
  2146  c
  2147  c     w  is a scratch array.
  2148  c
  2149  c     use is made of routines from the library
  2150  c     of basic linear algebra subroutines (blas).
  2151  c
  2152  c     parameters...
  2153  c
  2154  c                     input/
  2155  c       name   type   output/   sub-    description
  2156  c                     scratch  scripts
  2157  c       -------------------------------------------
  2158  c       n      int.      i              number of rows
  2159  c
  2160  c       k      int.     i/o             number of columns
  2161  c
  2162  c       zz     double precision     i/o       2     scaled orthogonal
  2163  c                                       matrix
  2164  c
  2165  c       nzzr   int.      i              row dimension of zz
  2166  c
  2167  c       dd     double precision     i/o       1     diagonal scaling
  2168  c                                       matrix (diagonal
  2169  c                                       elements only)
  2170  c
  2171  c       rr     double precision     i/o       1     right-triangular
  2172  c                                       matrix in compact form.
  2173  c
  2174  c       col    double precision      i        1     column to be
  2175  c                                       added to  rr
  2176  c
  2177  c       fail   log.      o             .true.  if  k,n
  2178  c                                       are improper
  2179  c
  2180  c       w      double precision     scr       1     workspace
  2181  c       -------------------------------------------
  2182  c
  2183  c     the  i-th  segment of the array  rr  is  n-i+2 spaces
  2184  c     long and contains  1  work space followed by the
  2185  c     k-i+1  elements of row  i  followed by  n-k
  2186  c     scratch spaces.
  2187  c     ***************
  2188  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 38

  2189  c     +++++++++++++++
  2190  c     blas  scopy1,sdot1,srotm1,srotmg1
  2191  c     +++++++++++++++
  2192  c
  2193        integer i,j,jdel,kp1,kp2
  2194        double precision di,one,param(5),wi,zero
  2195  c
  2196        double precision sdot1
  2197  c
  2198  c     +++++++++++++++
  2199  c     the following declarations are necessary
  2200  c     for portability when  scopy1  is used, as
  2201  c     it is below, to fill arrays with a single value
  2202  c     (one=unity  and  zero=zip  in this case).
  2203  c     +++++++++++++++
  2204  c
  2205        double precision unity(1),zip(1)
  2206        equivalence(one,unity(1)),(zero,zip(1))
  2207  c
  2208        data one/1.0d+00/
  2209        data zero/0.0d+00/
  2210  c
  2211  c     /////////////////  begin program  //////////////////
  2212  c
  2213        if(.not.(k.lt.0.or.k.ge.n.or.n.gt.nzzr))goto 23372
  2214           fail = .true.
  2215           goto 23373
  2216  c     else
  2217  23372    continue
  2218           if(.not.(k.le.0))goto 23374
  2219  c
  2220  c     ***************
  2221  c     for the special case that the
  2222  c     factorization was vacuous,
  2223  c     reset the arrays  zz and dd
  2224  c     to represent the  identity.
  2225  c     ***************
  2226  c
  2227              k = 0
  2228              call scopy1(n,unity,0,dd,1)
                                      ^
**** ERR  #325:  argument "unity" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2229              call scopy1(n*n,zip,0,zz,1)
                                      ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2230              do 23376 i = 1,n
  2231                 zz(i,i) = one
  2232  23376          continue
  2233  23374    continue
  2234           kp1 = k+1
  2235           kp2 = k+2
  2236  c
  2237  c     ***************
  2238  c     transform the incoming column,
  2239  c     and store the result in  w.
  2240  c     ***************
  2241  c
  2242           do 23378 i = 1,n
  2243              w(i) = sdot1(n,zz(1,i),1,col,1)
                                 ^
**** WAR  #611:  loop parameter "n" redefinition don't influence on iteration
                 count
  2244  23378       continue
  2245  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 39

  2246  c     ***************
  2247  c     zero out the spike which would result from
  2248  c     storing  w  in  rr.   update  zz  and  dd.
  2249  c     ***************
  2250  c
  2251           if(.not.(kp2.le.n))goto 23380
  2252              do 23382 i = kp2,n 
  2253                 di = dd(i)
  2254                 wi = w(i)
  2255                 call srotmg1(dd(kp1),di,w(kp1),wi,param)
  2256                 w(i) = wi
  2257                 dd(i) = di
  2258                 call srotm1(n,zz(1,kp1),1,zz(1,i),1,param)
                                   ^
**** WAR  #611:  loop parameter "n" redefinition don't influence on iteration
                 count
  2259  23382          continue
  2260  c
  2261  c     ***************
  2262  c     store the new column, which is still
  2263  c     in the array  w,  into  rr.
  2264  c     ***************
  2265  c
  2266  23380    continue
  2267           j = kp2
  2268           jdel = n
  2269           do 23384 i = 1,kp1 
  2270              rr(j) = w(i)
  2271              j = j+jdel
  2272              jdel = jdel-1
  2273  23384       continue
  2274           k = kp1
  2275           fail = .false.
  2276  23373 continue
  2277        return
  2278        end
  2279        subroutine dzdrcou(n,k,zz,nzzr,dd,rr,ic,fail)
  2280  c
  2281        integer ic,k,n,nzzr
  2282        logical fail
  2283        double precision dd(1),rr(1),zz(nzzr,1)
  2284  c
  2285  c     ***************
  2286  c     prepared by richard bartels
  2287  c     the university of waterloo
  2288  c     computer science department
  2289  c     latest update .... 30 november, 1979.
  2290  c
  2291  c     given the factorization
  2292  c
  2293  c          zz*dd*rr
  2294  c
  2295  c     of some  n by k  matrix
  2296  c
  2297  c       (1 .le. k .le. n)
  2298  c          (n .ge. 1),
  2299  c
  2300  c     where
  2301  c
  2302  c          (zz-transp)*(zz) = (dd-inv),
  2303  c          dd  is diagonal and nonsingular,
  2304  c     and
  2305  c          rr  has zeros below the diagonal,
  2306  c
  2307  c     and given the index  ic  of a column
  2308  c     to be removed  (1 .le. ic .le. k),
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 40

  2309  c     this program updates  zz,dd and rr .
  2310  c
  2311  c     the value of  k  is decreased by one, and
  2312  c     the column ordering in  rr  is changed.
  2313  c
  2314  c     use is made of routines from the library
  2315  c     of basic linear algebra subroutines (blas).
  2316  c
  2317  c     parameters...
  2318  c
  2319  c       name   type    input/   sub-    description
  2320  c                      output  scripts
  2321  c       -------------------------------------------
  2322  c       n      int.      i              number of rows
  2323  c
  2324  c       k      int.     i/o             number of columns
  2325  c
  2326  c       zz     double precision     i/o       2     scaled orthogonal
  2327  c                                       matrix
  2328  c
  2329  c       nzzr   int.      i              row dimension of zz
  2330  c
  2331  c       dd     double precision     i/o       1     diagonal scaling
  2332  c                                       matrix (diagonal
  2333  c                                       elements only)
  2334  c
  2335  c       rr     double precision     i/o       1     right-triangular
  2336  c                                       matrix in compact form.
  2337  c
  2338  c       ic     int.      i              index of column
  2339  c                                       to be removed
  2340  c
  2341  c       fail   log.      o              .true.  if  k,n,ic
  2342  c                                       are improper
  2343  c       -------------------------------------------
  2344  c
  2345  c     the  i-th  segment of the array  rr  is  n-i+2 spaces
  2346  c     long and contains  1  work space followed by the
  2347  c     k-i+1  elements of row  i  followed by  n-k
  2348  c     scratch spaces.
  2349  c     ***************
  2350  c
  2351  c     +++++++++++++++
  2352  c     blas  srotm1,srotmg1
  2353  c     +++++++++++++++
  2354  c
  2355        integer i,im1,j,jend,jinc,jstrt,km1,lstrt
  2356        double precision di,param(5),rj
  2357  c
  2358  c     /////////////////  begin program  //////////////////
  2359  c
  2360        if(.not.(k.lt.1.or.k.gt.n.or.n.gt.nzzr))goto 23386
  2361           fail = .true.
  2362           goto 23387
  2363  c     else
  2364  23386    continue
  2365           km1 = k-1
  2366  c
  2367  c     ***************
  2368  c     special cases are handled first.
  2369  c     1.  k=1 and the factorization becomes null.
  2370  c     2.  ic=k and the updating is trivial.
  2371  c     ***************
  2372  c
  2373           if(.not.(k.le.1))goto 23388
  2374              k = 0
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 41

  2375              fail = .false.
  2376              goto 23389
  2377  c        else
  2378  23388       continue
  2379              if(.not.(ic.ge.k))goto 23390
  2380                 k = km1
  2381                 fail = .false.
  2382                 goto 23391
  2383  c           else
  2384  23390          continue
  2385  c
  2386  c     ***************
  2387  c     general updating step.
  2388  c     the column to be deleted must be permuted
  2389  c     to the right, and subdiagonal elements
  2390  c     which result in  rr  have to be
  2391  c     transformed to zero.
  2392  c     ***************
  2393  c
  2394                 jstrt = ic+1
  2395                 jend = k
  2396                 jinc = n
  2397                 do 23392 i = 1,k 
  2398  c
  2399  c     ***************
  2400  c     permutation of the  i-th  row of rr.
  2401  c     ***************
  2402  c
  2403                    do 23394 j = jstrt,jend
  2404                       rr(j) = rr(j+1)
  2405  23394                continue
  2406                    if(.not.(i.gt.ic))goto 23396
  2407  c
  2408  c     ***************
  2409  c     transformation of the current and last
  2410  c     rows  (i and i-1)  of rr  as well as
  2411  c     corresponding changes to  zz and dd.
  2412  c
  2413  c     the extra variables  di  and  rj
  2414  c     are used to avoid an error message
  2415  c     from the  pfort verifier, and they
  2416  c     may be removed, if desired, so that
  2417  c     the call to  srotmg1  would be
  2418  c
  2419  c     call srotmg1(dd(im1),dd(i),rr(lstrt),rr(jstrt),param)
  2420  c
  2421  c     ***************
  2422  c
  2423                       im1 = i-1
  2424                       di = dd(i)
  2425                       rj = rr(jstrt)
  2426                       call srotmg1(dd(im1),di,rr(lstrt),rj,param)
                                               ^
**** WAR  #379:  subscript expression on "dd" possibly may be out of bounds
  2426                       call srotmg1(dd(im1),di,rr(lstrt),rj,param)
                                                            ^
**** WAR  #424:  variable "lstrt" is set to zero value by default
  2427                       rr(jstrt) = rj
  2428                       dd(i) = di
  2429                       call srotm1(jend-jstrt+1,rr(lstrt+1),1,rr(jstrt+1)
        ,
  2430  &                     1,param)
  2431                       call srotm1(n,zz(1,im1),1,zz(1,i),1,param)
                                                  ^
**** WAR  #379:  subscript expression on "zz" possibly may be out of bounds
  2432                       jstrt = jstrt+1
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 42

  2433  c
  2434  c     ***************
  2435  c     index updating
  2436  c     ***************
  2437  c
  2438  23396             continue
  2439                    lstrt = jstrt
  2440                    jstrt = jstrt+jinc
  2441                    jend = jend+jinc
  2442                    jinc = jinc-1
  2443  23392             continue
  2444                 k = km1
  2445                 fail = .false.
  2446  23391       continue
  2447  23389    continue
  2448  23387 continue
  2449        return
  2450        end
  2451        subroutine dzdrgit(n,k,zz,nzzr,rr,gv,sol,fail,w,big,eps)
                                                                    ^
**** WAR  #315:  variable "eps" declared but never used
  2452  c
  2453        integer k,n,nzzr
  2454        logical fail
  2455        double precision gv(1),rr(1),w(1),sol(1),zz(nzzr,1)
  2456  c
  2457  c     ***************
  2458  c     prepared by richard bartels
  2459  c     the university of waterloo
  2460  c     computer science department
  2461  c     latest update .... 30 november, 1979.
  2462  c
  2463  c     given the factorization
  2464  c
  2465  c          zz*dd*rr
  2466  c
  2467  c     of some  n by k  matrix
  2468  c
  2469  c       (1 .le. k .le. n)
  2470  c         (n .ge. 1),
  2471  c
  2472  c     where
  2473  c
  2474  c          (zz-transp)*(zz) = (dd-inv),
  2475  c          dd  is diagonal and nonsingular,
  2476  c     and
  2477  c          rr  has zeros below the diagonal,
  2478  c
  2479  c     and given an arbitrary vector  gv  of
  2480  c     appropriate dimension, this routine finds the
  2481  c     vector  sol  satisfying the underdetermined system
  2482  c
  2483  c          (zz*dd*rr-transp.)*(sol) = (gv).
  2484  c
  2485  c     that is,
  2486  c
  2487  c          (sol) = ((zz*dd*rr)-gen.inv.-transp.)*(gv).
  2488  c
  2489  c     the array  dd  is not needed by  dzdrgit.
  2490  c
  2491  c     use is made of routines from the library
  2492  c     of basic linear algebra subroutines (blas).
  2493  c
  2494  c     w  is a scratch array.
  2495  c
  2496  c     parameters...
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 43

  2497  c
  2498  c                     input/
  2499  c       name   type   output/   sub-    description
  2500  c                     scratch  scripts
  2501  c       -------------------------------------------
  2502  c       n      int.      i              number of rows
  2503  c
  2504  c       k      int.     i/o             number of columns
  2505  c
  2506  c       zz     double precision     i/o       2     scaled orthogonal
  2507  c                                       matrix
  2508  c
  2509  c       nzzr   int.      i              row dimension of zz
  2510  c
  2511  c       rr     double precision     i/o       1     right-triangular
  2512  c                                       matrix in compact form.
  2513  c
  2514  c       gv     double precision      i        1     given vector
  2515  c
  2516  c       sol    double precision      o        1     solution
  2517  c
  2518  c       fail   log.      o              .true. if  n,k
  2519  c                                       are improper, or if
  2520  c                                       rr  is singular
  2521  c
  2522  c       w      double precision     scr       1     workspace
  2523  c       -------------------------------------------
  2524  c
  2525  c     the  i-th  segment of the array  rr  is  n-i+2 spaces
  2526  c     long and contains  1  work space followed by the
  2527  c     k-i+1  elements of row  i  followed by  n-k
  2528  c     scratch spaces.
  2529  c
  2530  c     if  gv  and  sol  are dimensioned to the
  2531  c     maximum of  n  and  k , then the same
  2532  c     storage array may be used for both of
  2533  c     these vectors.
  2534  c     ***************
  2535  c
  2536  c     +++++++++++++++
  2537  c     system routines  dabs
  2538  c
  2539  c     blas  saxpy1,scopy1
  2540  c
  2541  c     big  is the largest positive number
  2542  c     which can be represented in the
  2543  c     precision of the arithmetic being used.
  2544  c     +++++++++++++++
  2545  c
  2546        integer i,j,jdel
  2547        double precision big,wi,one,rrj,zero,eps
  2548  c
  2549  c     +++++++++++++++
  2550  c     the following declarations are necessary
  2551  c     for portability when  scopy1  is used, as
  2552  c     it is below, to fill arrays with a single value
  2553  c     (zero=zip  in this case).
  2554  c     +++++++++++++++
  2555  c
  2556        double precision zip(1)
  2557        equivalence(zero,zip(1))
  2558  c
  2559        data one/1.0d+00/
  2560        data zero/0.0d+00/
  2561  c
  2562  c     /////////////////  begin program  //////////////////
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 44

  2563  c
  2564        if(.not.(k.lt.1.or.k.gt.n.or.n.gt.nzzr))goto 23398
  2565           fail = .true.
  2566           goto 23399
  2567  c     else
  2568  23398    continue
  2569  c
  2570  c     ***************
  2571  c     first solve  (rr-transp.)*(w) = (gv)
  2572  c     ***************
  2573  c
  2574           call scopy1(k,gv,1,w,1)
                                ^
**** ERR  #325:  argument "gv" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2575           j = 2
  2576           jdel = n+1
  2577           do 23400 i = 1,k 
  2578              rrj = rr(j)
                             ^
**** WAR  #379:  subscript expression on "rr" possibly may be out of bounds
  2579              wi = w(i)
  2580  c* Here the check for ill-condition is NOT changed to use eps instead o
        f big
  2581  c               if (dabs(rrj)<one)
  2582  c                       if (eps*dabs(wi)>=dabs(rrj))
  2583              if(.not.(dabs(rrj).lt.one))goto 23402
  2584                 if(.not.(dabs(wi).ge.dabs(rrj)*big))goto 23404
  2585                    go to 150
  2586  23404          continue
  2587  23402       continue
  2588              w(i) = wi/rrj
  2589              if(.not.(i.lt.k))goto 23406
  2590                 call saxpy1(k-i,(-w(i)),rr(j+1),1,w(i+1),1)
                                                    ^
**** WAR  #379:  subscript expression on "rr" possibly may be out of bounds
  2590                 call saxpy1(k-i,(-w(i)),rr(j+1),1,w(i+1),1)
                                                             ^
**** WAR  #379:  subscript expression on "w" possibly may be out of bounds
  2591  23406       continue
  2592              j = j+jdel
  2593              jdel = jdel-1
  2594  23400       continue
  2595  c
  2596  c     ***************
  2597  c     now  (sol) = (zz)*(w)
  2598  c     ***************
  2599  c
  2600           call scopy1(n,zip,0,sol,1)
                                 ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2601           do 23408 i = 1,k
  2602              call saxpy1(n,w(i),zz(1,i),1,sol,1)
  2603  23408       continue
  2604           fail = .false.
  2605           return
  2606  150      fail = .true.
  2607  23399 continue
  2608        return
  2609        end
  2610        subroutine dzdrgnv(n,k,zz,nzzr,rr,gv,sol,fail,big)
  2611  c
  2612        integer k,n,nzzr
  2613        logical fail
  2614        double precision gv(1),rr(1),sol(1),zz(nzzr,1)
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 45

  2615  c
  2616  c     ***************
  2617  c     prepared by richard bartels
  2618  c     the university of waterloo
  2619  c     computer science department
  2620  c     latest update .... 30 november, 1979.
  2621  c
  2622  c     given the factorization
  2623  c
  2624  c          zz*dd*rr
  2625  c
  2626  c     of some  n by k  matrix
  2627  c
  2628  c       (1 .le. k .le. n)
  2629  c         (n .ge. 1),
  2630  c
  2631  c     where
  2632  c
  2633  c          (zz-transp)*(zz) = (dd-inv),
  2634  c          dd  is diagonal and nonsingular,
  2635  c     and
  2636  c          rr  has zeros below the diagonal,
  2637  c
  2638  c     and given an arbitrary vector  gv  of
  2639  c     appropriate dimension, this routine finds the
  2640  c     vector  sol  given by
  2641  c
  2642  c          (sol) = ((zz*dd*rr)-gen.inv.)*(gv),
  2643  c
  2644  c     which represents the least squares problem
  2645  c
  2646  c        (zz*dd*rr)*(sol) = (gv).
  2647  c
  2648  c     the array  dd  is not needed by  dzdrgnv.
  2649  c
  2650  c     use is made of routines from the library
  2651  c     of basic linear algebra subroutines (blas).
  2652  c
  2653  c     parameters...
  2654  c
  2655  c       name   type   input/    sub-    description
  2656  c                     output/  scripts
  2657  c       -------------------------------------------
  2658  c       n      int.      i              number of rows
  2659  c
  2660  c       k      int.     i/o             number of columns
  2661  c
  2662  c       zz     double precision     i/o       2     scaled orthogonal
  2663  c                                       matrix
  2664  c
  2665  c       nzzr   int.      i              row dimension of zz
  2666  c
  2667  c       rr     double precision     i/o       1     right-triangular
  2668  c                                       matrix in compact form.
  2669  c
  2670  c       gv     double precision      i        1     given vector
  2671  c
  2672  c       sol    double precision      o        1     solution
  2673  c
  2674  c       fail   log.      o              .true. if  n,k
  2675  c                                       are improper, or if
  2676  c                                       rr  is singular
  2677  c       -------------------------------------------
  2678  c
  2679  c     the  i-th  segment of the array  rr  is  n-i+2 spaces
  2680  c     long and contains  1  work space followed by the
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 46

  2681  c     k-i+1  elements of row  i  followed by  n-k
  2682  c     scratch spaces.
  2683  c     ***************
  2684  c
  2685  c     +++++++++++++++
  2686  c     system routines  dabs
  2687  c
  2688  c     blas  sdot1
  2689  c
  2690  c     big  is the largest positive number
  2691  c     which can be represented in the
  2692  c     precision of the arithmetic being used.
  2693  c     +++++++++++++++
  2694  c
  2695        integer i,ix,j,jdel
  2696        double precision big,one,tden,tnum
  2697  c
  2698        double precision sdot1
  2699  c
  2700        data one/1.0d+00/
  2701  c
  2702  c     /////////////////  begin program  //////////////////
  2703  c
  2704        if(.not.(k.lt.1.or.k.gt.n.or.n.gt.nzzr))goto 23410
  2705           fail = .true.
  2706           goto 23411
  2707  c     else
  2708  23410    continue
  2709  c
  2710  c     ***************
  2711  c     form   (v) = (zz(1)-transp)*(gv),   where  zz(1)
  2712  c     is the matrix of the first  k  columns of  zz
  2713  c
  2714  c     v  can be stored in the array  sol.
  2715  c     ***************
  2716  c
  2717           do 23412 i = 1,k
  2718              sol(i) = sdot1(n,zz(1,i),1,gv,1)
  2719  23412       continue
  2720  c
  2721  c     ***************
  2722  c     backsolve the system
  2723  c          (rr)*(sol) = (v)
  2724  c     for the vector  sol
  2725  c
  2726  c     note that  sol  and  v
  2727  c     are stored in the same array.
  2728  c     ***************
  2729  c
  2730           j = (((n+1)*(n+2)-(n-k+3)*(n-k+2))/2)+2
  2731           jdel = n-k+3
  2732           do 23414 ix = 1,k 
  2733              i = k-ix+1
  2734              tden = rr(j)
  2735              tnum = sol(i)
  2736              if(.not.(ix.gt.1))goto 23416
  2737                 tnum = tnum-sdot1(ix-1,rr(j+1),1,sol(i+1),1)
  2738  23416       continue
  2739              if(.not.(dabs(tden).lt.one))goto 23418
  2740                 if(.not.(dabs(tnum).ge.dabs(tden)*big))goto 23420
  2741                    go to 160
  2742  23420          continue
  2743  23418       continue
  2744              sol(i) = tnum/tden
  2745              j = j-jdel
  2746              jdel = jdel+1
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 47

  2747  23414       continue
  2748           fail = .false.
  2749           return
  2750  160      fail = .true.
  2751  23411 continue
  2752        return
  2753        end
  2754        subroutine dzdrpoc(n,k,zz,nzzr,dd,gv,poc,fail)
  2755  c
  2756        integer k,n,nzzr
  2757        logical fail
  2758        double precision dd(1),poc(1),gv(1),zz(nzzr,1)
  2759  c
  2760  c     ***************
  2761  c     prepared by richard bartels
  2762  c     the university of waterloo
  2763  c     computer science department
  2764  c     latest update .... 30 november, 1979.
  2765  c
  2766  c     zz is an  n by n  (n .ge. 1)  scaled
  2767  c     orthogonal matrix.  dd  contains the
  2768  c     diagonal elements of a diagonal scaling
  2769  c     matrix.  gv  is a given vector of length  n.
  2770  c
  2771  c     we have
  2772  c
  2773  c          (zz-transp.)*(zz) = (dd-inv.)
  2774  c
  2775  c     and
  2776  c
  2777  c               zz*dd*rr = mat
  2778  c
  2779  c     for some  n by k  (0 .le. k .le. n)
  2780  c     matrix  rr  with zeros below the diagonal
  2781  c     and some given matrix  mat.  (niether  rr
  2782  c     nor  mat  are needed by  dzdrpoc.)
  2783  c
  2784  c     then
  2785  c
  2786  c    (proj(oc)) = (zz(2))*(dd(2))*(zz(2)-transp.)
  2787  c
  2788  c     is the (orthogonal) projector on the
  2789  c     complement of the range space of  mat,
  2790  c     where  zz(2)  represents the last  n-k
  2791  c     columns of  zz  and  dd(2)  represents the
  2792  c     lower-right-hand  n-k  order submatrix of  dd.
  2793  c
  2794  c     dzdrpoc  produces the vector
  2795  c
  2796  c               poc = (proj(oc))*gv .
  2797  c
  2798  c     use is made of routines from the library
  2799  c     of basic linear algebra subroutines (blas).
  2800  c
  2801  c     parameters...
  2802  c
  2803  c                     input/
  2804  c       name   type   output/   sub-    description
  2805  c                     scratch  scripts
  2806  c       -------------------------------------------
  2807  c       n      int.      i              order of  zz,dd
  2808  c
  2809  c       k      int.     i/o             number of columns
  2810  c                                       of  zz  defining
  2811  c                                       range of  mat
  2812  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 48

  2813  c       zz     double precision     i/o       2     scaled orthogonal
  2814  c                                       matrix
  2815  c
  2816  c       nzzr   int.      i              row dimension of zz
  2817  c
  2818  c       dd     double precision     i/o       1     diagonal scaling
  2819  c                                       matrix (diagonal
  2820  c                                       elements only)
  2821  c
  2822  c       gv     double precision      i        1     vector to be projec
        ted
  2823  c
  2824  c       poc    double precision      o        1     projection
  2825  c
  2826  c       fail   log.      o              .true.  if  n,k
  2827  c                                       are improper
  2828  c
  2829  c       -------------------------------------------
  2830  c
  2831  c     ***************
  2832  c
  2833  c     +++++++++++++++
  2834  c     blas  saxpy1,scopy1,sdot1
  2835  c     +++++++++++++++
  2836  c
  2837        integer i,kp1
  2838        double precision wi,zero
  2839  c
  2840        double precision sdot1
  2841  c
  2842  c     +++++++++++++++
  2843  c     the following declarations are necessary
  2844  c     for portability when  scopy1  is used, as
  2845  c     it is below, to fill arrays with a single value
  2846  c     (zero=zip  in this case).
  2847  c     +++++++++++++++
  2848  c
  2849        double precision zip(1)
  2850        equivalence(zero,zip(1))
  2851  c
  2852        data zero/0.0d+00/
  2853  c
  2854  c     /////////////////  begin program  //////////////////
  2855  c
  2856        kp1 = k+1
  2857        if(.not.(k.lt.0.or.k.gt.n.or.n.lt.1.or.n.gt.nzzr))goto 23422
  2858           fail = .true.
  2859           goto 23423
  2860  c     else
  2861  23422    continue
  2862           if(.not.(k.le.0))goto 23424
  2863  c
  2864  c     ***************
  2865  c     case 1 ... zz(2)=zz  (k=0)
  2866  c     ***************
  2867  c
  2868              call scopy1(n,gv,1,poc,1)
                                   ^
**** ERR  #325:  argument "gv" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2869              fail = .false.
  2870              goto 23425
  2871  c        else
  2872  23424       continue
  2873              if(.not.(k.ge.n))goto 23426
  2874  c
drqssbc.f                   Fri Apr 19 20:07:44 2002                   page 49

  2875  c     ***************
  2876  c     case 2 ... zz(2) is vacuous  (k=n)
  2877  c     ***************
  2878  c
  2879                 call scopy1(n,zip,0,poc,1)
                                       ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2880                 fail = .false.
  2881                 goto 23427
  2882  c           else
  2883  23426          continue
  2884  c
  2885  c     ***************
  2886  c     case 3 ... zz(2)  is intermediate
  2887  c     between the other two cases
  2888  c     (0 .lt. k .lt. n)
  2889  c     ***************
  2890  c
  2891                 call scopy1(n,zip,0,poc,1)
                                       ^
**** ERR  #325:  argument "zip" is array, but dummy argument is variable
                 See: "drqssbc.f" line #429
  2892                 do 23428 i = kp1,n 
  2893                    wi = sdot1(n,zz(1,i),1,gv,1)*dd(i)
                                     ^
**** WAR  #611:  loop parameter "n" redefinition don't influence on iteration
                 count
  2894                    call saxpy1(n,wi,zz(1,i),1,poc,1)
                                      ^
**** WAR  #611:  loop parameter "n" redefinition don't influence on iteration
                 count
  2895  23428             continue
  2896                 fail = .false.
  2897  23427       continue
  2898  23425    continue
  2899  23423 continue
  2900        return
  2901        end
Cross Reference                Fri Apr 19 20:07:44 2002                page 50





         C R O S S   R E F E R E N C E   T A B L E

  Source file:   drqssbc.f


Legend:
D        Definition/Declaration
U        Simple use
M        Modified occurrence
A        Actual argument
C        Subroutine/Function call
I        Initialization: DATA or extended declaration
E        Occurrence in EQUIVALENCE
N        Occurrence in NAMELIST

Cross Reference                Fri Apr 19 20:07:44 2002                page 51





         P R O G R A M   F O R M

 Functions and Subroutines
 -------------------------

dabs     intrinsic
                <drql1nlt>               C    435:C    437:C    443:C    493:C 
                                     495:C    520:C    531:C    548:C    560:C 
                                     594:C    607:C    653:C 
                <drql1sup>               C    842:C    859:C 
                <drql1fp>       C   1138:C   1140:C   1145:C   1163:C   1165:C 
                           1181:C 
                <drql1stp>               C   1317:C   1318:C 
                <dresid>        C   1572:C   1574:C   1580:C 
                <drql1gv>       C   1857:C 
                <dzdrgit>       C   2583:C   2584:C   2584:C 
                <dzdrgnv>       C   2739:C   2740:C   2740:C 

daddcol         <drql1up>       C    983:C 
                <daddcol>       D   1610:D 

dble     intrinsic
                <drql1nlt>               C    662:C    689:C    716:C    736:C 

dcrql1lt        <drqssbc>       C    262:C 
                <dcrql1lt>               D    267:D 

ddelcol1        <drql1up>       C    981:C 
                <ddelcol1>               D   1453:D 

ddkheap         <drql1stp>               C   1343:C   1374:C 
                <ddkheap>       D   1903:D 

dfloat   intrinsic
                <drql1nlt>               C    442:C    500:C 
                <dunif01>       C   2110:C 

dnewpen         <dcrql1lt>               C    336:C 
                <dnewpen>       D    882:D 

dresid          <drql1up>       C    982:C 
                <dresid>        D   1498:D 

drql1fp         <dcrql1lt>               C    344:C 
                <drql1fp>       D    991:D 

drql1gv         <drql1fp>       C   1101:C 
                <drql1gv>       D   1788:D 

drql1nlt        <dcrql1lt>               C    353:C 
                <drql1nlt>               D    385:D 

drql1obj        <drql1up>       C    985:C 
                <drql1obj>               D   1681:D 

drql1rf         <drql1rf>       D   1391:D 

drql1stp        <dcrql1lt>               C    347:C 
                <drql1stp>               D   1197:D 

drql1sup        <dcrql1lt>               C    334:C 
                <drql1sup>               D    763:D 
Cross Reference                Fri Apr 19 20:07:44 2002                page 52


drql1up         <dcrql1lt>               C    340:C 
                <drql1up>       D    937:D 

drqssbc         <drqssbc>       D      1:D 

dsign    intrinsic
                <drql1nlt>               C    434:C    645:C 
                <drql1stp>               C   1279:C   1294:C   1315:C   1315:C 
                                    1362:C 
                <drql1rf>       C   1434:C 
                <drql1obj>               C   1743:C 
                <drql1gv>       C   1859:C   1865:C 

dsqrt    intrinsic
                <drql1nlt>               C    442:C    500:C 

dunif01  real*8 <dresid>       DC   1527:D   1602:C 
                <drql1obj>              DC   1713:D   1746:C 
                <drql1gv>      DC   1819:D   1840:C 
                <dunif01>      DM   2022:D   2110:M 

dzdrcin         <daddcol>       C   1675:C 
                <dzdrcin>       D   2113:D 

dzdrcou         <ddelcol1>               C   1493:C 
                <dzdrcou>       D   2279:D 

dzdrgit         <drql1fp>       C   1105:C 
                <dzdrgit>       D   2451:D 

dzdrgnv         <drql1nlt>               C    478:C    484:C 
                <drql1fp>       C   1082:C 
                <dzdrgnv>       D   2610:D 

dzdrpoc         <drql1fp>       C   1058:C 
                <daddcol>       C   1669:C 
                <dzdrpoc>       D   2754:D 

float    intrinsic
                <dresid>        C   1602:C 
                <drql1gv>       C   1840:C 

ifix     intrinsic
                <dresid>        C   1602:C 
                <drql1gv>       C   1840:C 

mod      intrinsic
                <dunif01>       C   2098:C   2108:C   2108:C 

sasum1   real*8 <drql1fp>      DC   1025:D   1065:C   1066:C   1108:C 
                <drql1stp>              DC   1232:D   1353:C   1354:C 
                <daddcol>      DC   1641:D   1670:C   1671:C 

saxpy1          <drql1nlt>               C    448:C    449:C    454:C    461:C 
                                     466:C    471:C 
                <drql1stp>               C   1287:C   1302:C   1385:C 
                <drql1obj>               C   1781:C   1782:C 
                <drql1gv>       C   1890:C 
                <dzdrgit>       C   2590:C   2602:C 
                <dzdrpoc>       C   2894:C 

scopy1          <drql1nlt>               C    429:C    430:C    674:C    705:C 
                                     707:C    721:C    748:C    750:C 
                <drql1obj>               C   1737:C   1738:C 
                <dzdrcin>       C   2228:C   2229:C 
Cross Reference                Fri Apr 19 20:07:44 2002                page 53

                <dzdrgit>       C   2574:C   2600:C 
                <dzdrpoc>       C   2868:C   2879:C   2891:C 

sdot1    real*8 <dnewpen>      DC    903:D    930:C 
                <drql1stp>              DC   1232:D   1271:C   1278:C   1293:C 
                                    1313:C   1351:C   1352:C 
                <drql1rf>      DC   1416:D   1433:C 
                <dresid>       DC   1527:D   1571:C 
                <dzdrcin>      DC   2196:D   2243:C 
                <dzdrgnv>      DC   2698:D   2718:C   2737:C 
                <dzdrpoc>      DC   2840:D   2893:C 

sngl     intrinsic
                <dresid>        C   1602:C 
                <drql1gv>       C   1840:C 

srotm1          <dzdrcin>       C   2258:C 
                <dzdrcou>       C   2429:C   2431:C 

srotmg1         <dzdrcin>       C   2255:C 
                <dzdrcou>       C   2426:C 

sscal1          <drql1fp>       C   1064:C 
Cross Reference                Fri Apr 19 20:07:44 2002                page 54


 Variables and Arrays
 --------------------

a        real*8 dummy array size: 8 bytes
                <drql1nlt>              DA    386:D    400:D    429:A    448:A 
                                     454:A    461:A    471:A    478:A 

aa       real*8 dummy array size: 8 bytes
                <drql1nlt>             DUA    386:D    400:D    478:A    503:U 
                                     510:U    519:U    530:U    547:U    559:U 
                                     573:U    581:U    593:U    606:U 

alf      real*8 dummy array size: 8 bytes
                <drql1stp>            DUMA   1198:D   1202:D   1330:M   1343:A 
                                    1374:A   1384:U 

allq     real*4 <drql1nlt>               U    470:U 

alpha    real*4 dummy
                <drql1nlt>              DM    387:D    679:M    726:M 

alpha    real*8 <dcrql1lt>              DA    288:D    337:A    348:A    355:A 

alpha    real*8 dummy
                <dnewpen>      DM    883:D    887:D    922:M 
                <drql1stp>             DMA   1198:D   1202:D   1261:M   1384:M 
                                    1385:A 

amag     real*8 <dcrql1lt>             DUA    288:D    335:A    345:A    352:U 
                                     355:A    366:U 

amag     real*8 dummy
                <drql1sup>             DUM    764:D    768:D    836:M    847:U 
                                     848:M 
                <drql1fp>      DU    992:D    997:D   1080:U   1135:U 
                <drql1nlt>              DU    387:D    404:D    668:U 

aray     real*8 dummy array size: 8 bytes
                <ddkheap>     DUM   1903:D   1907:D   1955:U   1969:U   1971:M 
                           1971:U   1990:U   1990:U   2000:U   2004:M   2004:U 
                           2008:M   2012:M 

b        real*8 dummy array size: 8 bytes
                <drql1nlt>              DA    386:D    400:D    430:A    449:A 
                                     466:A    484:A 

bb       real*8 dummy array size: 8 bytes
                <drql1nlt>             DUA    386:D    400:D    484:A    503:U 
                                     510:U    519:U    520:U    530:U    531:U 
                                     547:U    548:U    559:U    560:U    573:U 
                                     581:U    593:U    594:U    606:U    607:U 

big      real*8 dummy
                <drqssbc>      DA      2:D    257:D    263:A 
                <dcrql1lt>             DUA    268:D    282:D    316:U    346:A 
                                     349:A    357:A 
                <drql1fp>      DA    993:D   1023:D   1083:A   1106:A 
                <drql1stp>              DU   1198:D   1229:D   1320:U 
                <drql1nlt>             DUA    388:D    402:D    478:A    484:A 
                                     522:U    533:U    550:U    562:U    596:U 
                                     609:U 
                <dzdrgnv>      DU   2610:D   2696:D   2740:U 
                <dzdrgit>      DU   2451:D   2547:D   2584:U 
                <drql1rf>       D   1392:D   1416:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 55

cf       real*8 <drql1gv>     DUM   1817:D   1847:M   1850:U   1855:M   1855:U 
                           1857:U   1859:U   1865:U 

cgmag    real*8 <dcrql1lt>             DUA    288:D    335:A    345:A    351:U 
                                     352:U    355:A    366:U    366:U 

cgmag    real*8 dummy
                <drql1sup>             DUM    764:D    768:D    837:M    864:U 
                                     865:M 
                <drql1fp>      DU    992:D    997:D   1080:U   1135:U 
                <drql1nlt>              DU    387:D    404:D    672:U 

coef     real*8 dummy array size: 8 bytes
                <drql1gv>     DUM   1788:D   1792:D   1847:U   1848:M   1880:M 

coefx    int*4  <drql1fp>     DUM   1020:D   1049:M   1050:U   1082:U   1102:U 
                           1105:U 

col      real*8 dummy array size: 8 bytes
                <dzdrcin>      DA   2113:D   2117:D   2243:A 

colnrm   real*8 <daddcol>     DUM   1639:D   1670:M   1672:U 

dd       real*8 dummy array size: 8 bytes
                <drql1up>      DA    938:D    943:D    981:A    983:A 
                <drql1fp>      DA    992:D    997:D   1058:A 
                <ddelcol1>              DA   1453:D   1456:D   1493:A 
                <daddcol>      DA   1610:D   1614:D   1669:A   1675:A 
                <dzdrpoc>      DU   2754:D   2758:D   2893:U 
                <dzdrcou>    DUMA   2279:D   2283:D   2424:U   2426:A   2428:M 
                <dzdrcin>    DUMA   2113:D   2117:D   2228:A   2253:U   2255:A 
                           2257:M 

ddx      int*4  <dcrql1lt>             DUA    286:D    334:A    342:U    346:U 

ddx      int*4  dummy
                <drql1sup>             DUM    763:D    766:D    811:M    812:U 

den      real*8 <drql1stp>             DUM   1229:D   1313:M   1314:U   1315:U 
                                    1318:M   1318:U   1319:U   1320:U   1324:U 

di       real*8 <dzdrcou>    DUMA   2356:D   2424:M   2426:A   2428:U 
                <dzdrcin>    DUMA   2194:D   2253:M   2255:A   2257:U 

e        real*8 dummy array
                <drqssbc>      DA      2:D    256:D    262:A 
                <dcrql1lt>              DA    268:D    280:D    335:A    336:A 
                                     341:A    344:A    347:A    353:A 
                <drql1sup>             DUM    764:D    768:D    823:M    823:U 
                                     842:U    859:U 
                <dnewpen>      DA    882:D    887:D    930:A 
                <drql1up>      DA    938:D    943:D    982:A    983:A    985:A 
                <drql1fp>     DUA    991:D    997:D   1101:A   1140:U   1165:U 
                <drql1stp>              DA   1197:D   1202:D   1271:A   1278:A 
                                    1287:A   1293:A   1302:A   1313:A 
                <drql1nlt>            DUMA    385:D    399:D    437:U    448:A 
                                     449:A    454:A    461:A    466:A    471:A 
                                     495:U    757:M    757:U 
                <dresid>      DUA   1498:D   1501:D   1571:A   1574:U 
                <daddcol>      DA   1610:D   1614:D   1669:A   1670:A   1675:A 
                <drql1obj>              DA   1681:D   1685:D   1781:A   1782:A 
                <drql1gv>      DA   1788:D   1792:D   1890:A 
                <drql1rf>      DA   1391:D   1395:D   1433:A 

eps      real*8 dummy
                <drqssbc>      DA      2:D    257:D    263:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 56

                <dcrql1lt>              DA    268:D    281:D    342:A    346:A 
                                     349:A    357:A 
                <drql1up>      DA    939:D    945:D    982:A    984:A 
                <drql1fp>     DUA    993:D   1023:D   1080:U   1102:A   1106:A 
                           1135:U   1145:U   1172:U 
                <drql1stp>              DU   1198:D   1229:D   1371:U 
                <drql1nlt>              DU    388:D    402:D    422:U    442:U 
                                     500:U    640:U 
                <dresid>       DU   1498:D   1525:D   1534:U 
                <daddcol>      DU   1611:D   1616:D   1672:U 
                <drql1gv>      DU   1789:D   1817:D   1836:U   1850:U 
                <dzdrgit>       D   2451:D   2547:D 
                <drql1rf>       D   1392:D   1416:D 

erql1n   real*8 dummy
                <dcrql1lt>              DA    268:D    280:D    341:A    345:A 
                                     356:A 
                <drql1up>      DA    938:D    943:D    986:A 
                <drql1fp>       D    992:D    997:D 
                <drql1nlt>               D    388:D    403:D 
                <drql1obj>             DUM   1682:D   1685:D   1735:M   1772:M 
                                    1772:U 
                <drql1rf>     DUM   1391:D   1395:D   1431:M   1440:M   1440:U 

erql1n   real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    256:D    263:A 

etp      real*8 <drql1stp>             DUM   1232:D   1278:M   1279:U   1293:M 
                                    1294:U 

f        real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    256:D    263:A 
                <dcrql1lt>              DA    268:D    280:D    337:A    341:A 
                                     345:A    353:A 
                <dnewpen>      DU    883:D    887:D    930:U 
                <drql1up>      DA    938:D    943:D    982:A 
                <drql1fp>      DU    992:D    997:D   1138:U   1163:U 
                <drql1nlt>              DU    385:D    404:D    435:U    493:U 
                <dresid>       DU   1498:D   1501:D   1571:U   1572:U 
                <drql1rf>      DU   1391:D   1395:D   1433:U 

factor   real*8 dummy
                <drqssbc>      DA      3:D    258:D    264:A 
                <dcrql1lt>              DA    269:D    283:D    357:A 
                <drql1nlt>              DU    388:D    405:D    638:U    668:U 
                                     672:U    720:U 

fail     log*4  <drql1fp>     DUA   1021:D   1058:A   1059:U   1082:A   1084:U 
                           1106:A   1107:U   1110:U 
                <drql1nlt>             DUA    395:D    478:A    479:U    484:A 
                                     485:U 
                <ddelcol1>              DA   1481:D   1493:A 
                <daddcol>      DA   1638:D   1669:A   1675:A 
                <drql1rf>      DU   1413:D   1426:U 

fail     log*4  dummy
                <dzdrgnv>      DM   2610:D   2613:D   2705:M   2748:M   2750:M 
                <dzdrpoc>      DM   2754:D   2757:D   2858:M   2869:M   2880:M 
                           2896:M 
                <dzdrgit>      DM   2451:D   2454:D   2565:M   2604:M   2606:M 
                <dzdrcou>      DM   2279:D   2282:D   2361:M   2375:M   2381:M 
                           2445:M 
                <dzdrcin>      DM   2113:D   2116:D   2214:M   2275:M 

fidel    real*8 <drql1nlt>             DUM    404:D    627:M    648:M    648:U 
                                     663:U    690:U    717:U    737:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 57


grd      real*8 dummy array size: 8 bytes
                <drql1up>      DA    938:D    943:D    986:A 
                <drql1fp>      DA    992:D    997:D   1058:A   1066:A   1082:A 
                           1102:A 
                <drql1stp>              DA   1198:D   1202:D   1351:A 
                <drql1obj>              DA   1682:D   1685:D   1737:A   1781:A 
                <drql1gv>      DA   1788:D   1792:D   1890:A 

grd1     real*8 dummy array size: 8 bytes
                <drql1up>      DA    939:D    944:D    986:A 
                <drql1stp>              DA   1198:D   1202:D   1287:A   1302:A 
                                    1352:A   1354:A 
                <drql1obj>              DA   1682:D   1686:D   1738:A   1782:A 

grd1x    int*4  <dcrql1lt>             DUA    286:D    334:A    342:U    349:U 

grd1x    int*4  dummy
                <drql1sup>             DUM    763:D    766:D    808:M    809:U 

grdnrm   real*8 <drql1fp>      DM   1022:D   1066:M 
                <drql1stp>             DUM   1229:D   1354:M   1371:U 

grdx     int*4  <dcrql1lt>             DUA    286:D    334:A    341:U    345:U 
                                     348:U    354:U 

grdx     int*4  dummy
                <drql1sup>             DUM    763:D    766:D    807:M    808:U 

gv       real*8 dummy array size: 8 bytes
                <dzdrgnv>      DA   2610:D   2614:D   2718:A 
                <dzdrpoc>      DA   2754:D   2758:D   2868:A   2893:A 
                <dzdrgit>      DA   2451:D   2455:D   2574:A 

half     real*8 <drql1obj>              DI   1711:D   1725:I 

i        int*4  <dcrql1lt>              UM    376:M    377:U    377:U    378:U 
                                     378:U 
                <drql1sup>             DUM    781:D    821:M    823:U    823:U 
                                     841:M    842:U    858:M    859:U 
                <dnewpen>     DUM    900:D    929:M    930:U    930:U    930:U 
                            931:U    932:U    932:U 
                <drql1fp>     DUM   1020:D   1137:M   1138:U   1140:U   1145:U 
                           1162:M   1163:U   1165:U   1174:U   1175:U   1181:U 
                <drql1stp>             DUM   1228:D   1269:M   1270:U   1276:M 
                                    1277:U   1310:M   1311:U   1329:U   1355:M 
                <drql1nlt>              UM    432:M    433:U    490:M    491:U 
                                     503:U    503:U    506:U    510:U    510:U 
                                     519:U    519:U    520:U    526:U    530:U 
                                     530:U    531:U    538:U    547:U    547:U 
                                     548:U    555:U    559:U    559:U    560:U 
                                     567:U    573:U    573:U    577:U    581:U 
                                     581:U    585:U    593:U    593:U    594:U 
                                     601:U    606:U    606:U    607:U    614:U 
                                     629:M    630:U    630:U    631:U    631:U 
                                     642:M    643:U    755:M    757:U    757:U 
                <dzdrgnv>     DUM   2695:D   2717:M   2718:U   2718:U   2733:M 
                           2735:U   2737:U   2744:U 
                <ddelcol1>             DUM   1480:D   1488:M   1489:U   1489:U 
                <dresid>      DUM   1524:D   1542:M   1543:U   1569:M   1570:U 
                           1586:U   1601:M   1602:U   1602:U   1604:U   1605:U 
                <daddcol>     DUM   1637:D   1666:M   1668:U   1673:U 
                <drql1obj>             DUM   1710:D   1740:M   1741:U   1745:U 
                                    1765:U 
                <dzdrpoc>     DUM   2837:D   2892:M   2893:U   2893:U   2894:U 
                <drql1gv>      DM   1816:D   1841:M 
Cross Reference                Fri Apr 19 20:07:44 2002                page 58

                <dzdrgit>     DUM   2546:D   2577:M   2579:U   2588:U   2589:U 
                           2590:U   2590:U   2590:U   2601:M   2602:U   2602:U 
                <ddkheap>     DUM   1927:D   1987:M   2003:U   2004:U   2007:U 
                           2008:U 
                <drql1rf>      UM   1432:M   1433:U   1433:U   1435:U   1438:U 
                           1439:U 
                <dzdrcou>     DUM   2355:D   2397:M   2406:U   2423:U   2424:U 
                           2428:U   2431:U 
                <dzdrcin>     DUM   2193:D   2230:M   2231:U   2231:U   2242:M 
                           2243:U   2243:U   2252:M   2253:U   2254:U   2256:U 
                           2257:U   2258:U   2269:M   2270:U 

iaddc    int*4  <dcrql1lt>              DA    286:D    336:A    340:A    347:A 
                                     355:A 

iaddc    int*4  dummy
                <dnewpen>      DM    882:D    885:D    920:M 
                <drql1up>      DA    937:D    941:D    981:A    982:A    983:A 
                            985:A 
                <drql1stp>             DUM   1197:D   1200:D   1275:U   1276:U 
                                    1378:M 
                <drql1nlt>              DM    386:D    398:D    676:M    723:M 
                <ddelcol1>             DUM   1453:D   1455:D   1488:U   1491:U 
                                    1492:M   1492:U 
                <dresid>      DUM   1498:D   1500:D   1536:U   1542:U   1567:U 
                           1585:M   1585:U   1586:U   1587:U   1600:U   1601:U 
                           1602:U 
                <daddcol>      DU   1610:D   1613:D   1648:U   1666:U 
                <drql1obj>              DU   1681:D   1684:D   1745:U   1765:U 

iadp1    int*4  <dresid>      DUM   1524:D   1567:M   1568:U   1569:U 

ic       int*4  dummy
                <dzdrcou>      DU   2279:D   2281:D   2379:U   2394:U   2406:U 

icyc     int*4  dummy
                <drqssbc>      DA      2:D    254:D    264:A 
                <dcrql1lt>              DA    269:D    286:D    335:A    340:A 
                                     355:A 
                <drql1sup>              DM    764:D    766:D    878:M 
                <drql1up>     DUM    937:D    941:D    975:M    975:U    976:U 
                <drql1nlt>              DM    386:D    398:D    677:M    724:M 

idelc    int*4  <dcrql1lt>              DA    286:D    336:A    340:A    344:A 
                                     349:A    355:A 

idelc    int*4  dummy
                <dnewpen>      DM    882:D    885:D    921:M 
                <drql1up>      DA    937:D    941:D    981:A    983:A 
                <drql1fp>    DUMA    991:D    995:D   1043:M   1101:A   1104:U 
                <drql1stp>              DU   1198:D   1201:D   1291:U   1292:U 
                <drql1nlt>              DM    386:D    398:D    675:M    722:M 
                <ddelcol1>            DUMA   1453:D   1455:D   1485:U   1486:U 
                                    1487:U   1493:A   1494:M 
                <daddcol>      DU   1610:D   1613:D   1672:U 
                <drql1gv>     DUM   1788:D   1791:D   1837:M   1864:M   1879:U 
                           1880:U   1881:U 

idlp1    int*4  <ddelcol1>             DUM   1480:D   1486:M   1488:U 

idummy   int*4  <dresid>       DA   1524:D   1602:A 
                <drql1obj>              DA   1710:D   1746:A 
                <drql1gv>      DA   1816:D   1840:A 

ifl      int*4  dummy
                <drqssbc>      DA      1:D    253:D    262:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 59

                <dcrql1lt>            DUMA    267:D    276:D    296:M    325:M 
                                     335:A    336:A    341:A    344:A    347:A 
                                     350:U    351:U    355:A    360:U    366:U 
                <drql1sup>             DUM    764:D    766:D    797:M    820:U 
                                     852:M    869:M    877:M 
                <dnewpen>     DUM    882:D    885:D    916:U    918:M 
                <drql1up>     DUM    938:D    941:D    974:U    977:M 
                <drql1fp>     DUM    991:D    995:D   1044:U   1060:M   1085:M 
                           1111:M   1152:M   1154:U   1187:M   1189:M 
                <drql1stp>             DUM   1197:D   1200:D   1262:U   1306:M 
                                    1334:M   1376:M 
                <drql1nlt>             DUM    386:D    396:D    428:U    428:U 
                                     480:M    486:M    658:U    658:U    662:U 
                                     678:M    685:M    689:U    693:U    693:U 
                                     712:U    712:U    716:U    725:M    732:M 
                                     736:U    740:U    740:U 
                <drql1rf>      DM   1391:D   1394:D   1427:M 

iin      int*4  <drql1stp>             DMA   1228:D   1350:M   1374:A 

il       int*4  <ddkheap>     DUM   1927:D   1940:M   1942:M   1947:U   1953:M 
                           1953:U   1954:U   1955:U   1984:U 

ilend    log*4  <dcrql1lt>             DUM    279:D    299:M    317:M    323:U 
                                     351:U 

ilfix    log*4  <dcrql1lt>             DMA    279:D    300:M    318:M    356:A 

ilfix    log*4  dummy
                <drql1nlt>              DU    387:D    395:D    421:U    425:U 
                                     446:U    502:U    546:U    592:U    657:U 

im1      int*4  <dzdrcou>     DUM   2355:D   2423:M   2426:U   2431:U 

indx     int*4  dummy array size: 4 bytes
                <drqssbc>      DA      2:D    253:D    263:A 
                <dcrql1lt>             DUA    268:D    276:D    337:A    341:A 
                                     345:A    348:A    353:A    377:U    377:U 
                                     378:U    378:U 
                <dnewpen>      DM    883:D    885:D    932:M 
                <drql1up>      DA    938:D    941:D    981:A    982:A    984:A 
                            986:A 
                <drql1fp>      DA    992:D    995:D   1102:A 
                <drql1stp>            DUMA   1198:D   1200:D   1270:U   1277:U 
                                    1292:U   1311:U   1327:U   1328:M   1329:M 
                                    1343:A   1356:U   1374:A 
                <drql1nlt>              DU    385:D    398:D    433:U    491:U 
                                     630:U    630:U    631:U    631:U    643:U 
                                     667:U 
                <ddelcol1>             DUM   1453:D   1455:D   1487:U   1489:M 
                                    1489:U   1491:M 
                <dresid>      DUM   1498:D   1500:D   1543:U   1570:U   1586:M 
                           1586:U   1587:M   1603:U   1604:M   1604:U   1605:M 
                <daddcol>     DUM   1611:D   1613:D   1668:U   1673:M   1673:U 
                           1674:M 
                <drql1obj>              DU   1682:D   1684:D   1741:U 
                <drql1gv>      DU   1789:D   1791:D   1846:U   1881:U 
                <ddkheap>     DUM   1903:D   1905:D   1954:U   1968:U   1970:M 
                           1970:U   2003:M   2003:U   2007:M   2011:M 
                <drql1rf>       D   1392:D   1394:D 

ir       int*4  dummy
                <ddkheap>     DUM   1903:D   1905:D   1933:U   1942:U   1968:U 
                           1969:U   1970:U   1971:U   1972:M   1972:U   1973:U 
                           1989:U   1996:U   2017:M 

Cross Reference                Fri Apr 19 20:07:44 2002                page 60

irand    int*4  <dresid>      DUM   1524:D   1602:M   1603:U   1604:U 
                <drql1gv>     DUM   1816:D   1840:M   1842:M   1842:U   1843:U 
                           1844:M   1846:U   1847:U   1848:U   1864:U 

isave    int*4  <drql1nlt>             DUM    398:D    506:M    526:M    538:M 
                                     555:M    567:M    577:M    585:M    601:M 
                                     614:M    667:U 

iseed    int*4  dummy
                <dunif01>      DU   2022:D   2024:D   2097:U   2098:U 

istrt    int*4  <daddcol>     DUM   1637:D   1647:M   1648:U   1666:U 

it       int*4  <ddkheap>     DUM   1927:D   1954:M   1968:M   2007:U   2011:U 

itend    log*4  <dcrql1lt>             DUM    279:D    298:M    309:M    323:U 
                                     351:U 

ix       int*4  <drql1fp>     DUM   1020:D   1139:M   1140:U   1140:U   1164:M 
                           1165:U   1165:U 
                <drql1stp>             DUM   1228:D   1270:M   1271:U   1271:U 
                                    1277:M   1278:U   1280:U   1283:U   1284:U 
                                    1287:U   1292:M   1293:U   1295:U   1298:U 
                                    1299:U   1302:U   1311:M   1312:U   1313:U 
                                    1314:U   1328:U   1356:M   1357:U   1362:U 
                                    1364:U   1367:U   1370:U 
                <drql1nlt>             DUM    397:D    433:M    434:U    435:U 
                                     437:U    443:U    447:U    448:U    449:U 
                                     453:U    454:U    460:U    461:U    465:U 
                                     466:U    470:U    471:U    491:M    493:U 
                                     495:U    501:U    545:U    643:M    644:U 
                                     646:U    652:U 
                <dzdrgnv>     DUM   2695:D   2732:M   2733:U   2736:U   2737:U 
                <dresid>      DUM   1524:D   1543:M   1544:U   1570:M   1571:U 
                           1571:U   1572:U   1574:U   1581:U   1587:U   1588:U 
                           1603:M   1605:U 
                <daddcol>     DUM   1637:D   1668:M   1669:U   1670:U   1672:U 
                           1674:U   1675:U 
                <drql1obj>             DUM   1710:D   1741:M   1742:U   1761:U 
                                    1768:U   1771:U   1777:U   1781:U   1782:U 
                <drql1gv>     DUM   1816:D   1846:M   1849:U   1854:U   1858:U 
                           1881:M   1882:U   1884:U   1887:U   1890:U 

ix       int*4  dummy
                <dunif01>     DUM   2022:D   2024:D   2098:M   2099:U   2100:U 
                           2109:M 

ix0      int*4  <dunif01>    DIUM   2024:D   2026:I   2100:M   2108:M   2108:U 
                           2109:U   2110:U 

ixdlc    int*4  <ddelcol1>             DUM   1480:D   1487:M   1491:U   1494:U 

j        int*4  <drql1sup>             DUM    781:D    822:M    823:U    823:U 
                                     839:M    842:U    856:M    859:U 
                <drql1nlt>              UM    436:M    437:U    437:U    494:M 
                                     495:U    495:U    756:M    757:U    757:U 
                <dzdrgnv>     DUM   2695:D   2730:M   2734:U   2737:U   2745:M 
                           2745:U 
                <dresid>      DUM   1524:D   1573:M   1574:U   1574:U 
                <dzdrgit>     DUM   2546:D   2575:M   2578:U   2590:U   2592:M 
                           2592:U 
                <ddkheap>     DUM   1927:D   1984:M   1987:U   1988:M   1988:U 
                           1989:U   1990:U   1990:U   1991:M   1991:U   1996:U 
                           2000:U   2003:U   2004:U 
                <dzdrcou>     DUM   2355:D   2403:M   2404:U   2404:U 
                <dzdrcin>     DUM   2193:D   2267:M   2270:U   2271:M   2271:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 61


jdel     int*4  <dzdrgnv>     DUM   2695:D   2731:M   2745:U   2746:M   2746:U 
                <dzdrgit>     DUM   2546:D   2576:M   2592:U   2593:M   2593:U 
                <dzdrcin>     DUM   2193:D   2268:M   2271:U   2272:M   2272:U 

jend     int*4  <dzdrcou>     DUM   2355:D   2395:M   2403:U   2429:U   2441:M 
                           2441:U 

jinc     int*4  <dzdrcou>     DUM   2355:D   2396:M   2440:U   2441:U   2442:M 
                           2442:U 

jstrt    int*4  <dzdrcou>     DUM   2355:D   2394:M   2403:U   2425:U   2427:U 
                           2429:U   2429:U   2432:M   2432:U   2439:U   2440:M 
                           2440:U 

jx       int*4  <drql1stp>             DUM   1228:D   1327:M   1329:U 

k        int*4  <drql1nlt>             DUM    396:D    626:M    633:M    633:U 
                                     639:U    665:U    692:U    719:U    739:U 

k        int*4  dummy
                <drqssbc>      DA      3:D    254:D    264:A 
                <dcrql1lt>             DUM    269:D    278:D    375:M    380:M 
                                     380:U 
                <dzdrgnv>      DU   2610:D   2612:D   2704:U   2704:U   2717:U 
                           2730:U   2730:U   2731:U   2732:U   2733:U 
                <dzdrpoc>      DU   2754:D   2756:D   2856:U   2857:U   2857:U 
                           2862:U   2873:U 
                <dzdrgit>     DUA   2451:D   2453:D   2564:U   2564:U   2574:A 
                           2577:U   2589:U   2590:U   2601:U 
                <dzdrcou>     DUM   2279:D   2281:D   2360:U   2360:U   2365:U 
                           2373:U   2374:M   2379:U   2380:M   2395:U   2397:U 
                           2444:M 
                <dzdrcin>     DUM   2113:D   2115:D   2213:U   2213:U   2218:U 
                           2227:M   2234:U   2235:U   2274:M 

k0       int*4  dummy
                <drqssbc>      DA      3:D    254:D    264:A 
                <dcrql1lt>              DA    269:D    278:D    357:A 
                <drql1nlt>              DU    388:D    398:D    639:U 

km1      int*4  <dzdrcou>     DUM   2355:D   2365:M   2380:U   2444:U 

kp1      int*4  <dzdrpoc>     DUM   2837:D   2856:M   2892:U 
                <dzdrcin>     DUM   2193:D   2234:M   2255:U   2255:U   2258:U 
                           2269:U   2274:U 

kp2      int*4  <dzdrcin>     DUM   2193:D   2235:M   2251:U   2252:U   2267:U 

l0       real*8 <dcrql1lt>             DMA    282:D    315:M    356:A 

l0       real*8 dummy
                <drql1nlt>             DUM    387:D    402:D    426:U    640:M 
                                     712:U    740:U    743:U 

l1       real*8 <dcrql1lt>             DMA    282:D    316:M    356:A 

l1       real*8 dummy
                <drql1nlt>               D    387:D    402:D 

lam      real*8 dummy
                <dcrql1lt>              DU    268:D    281:D    304:U    305:U 
                                     314:U 
                <drql1sup>              DU    764:D    768:D    823:U 

lamb     real*8 <drql1nlt>             DUM    402:D    424:M    466:U    524:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 62

                                     535:U    573:U    573:U    574:U    581:U 
                                     581:U    582:U    611:U    661:U    664:U 
                                     688:U    691:U    700:U    718:U    738:U 
                                     757:U 

lnxt     real*8 <dcrql1lt>            DUMA    283:D    304:M    319:M    331:U 
                                     335:A    356:A    359:U 

lnxt     real*8 dummy
                <drql1nlt>             DUM    387:D    402:D    424:U    426:M 
                                     524:U    525:M    535:U    537:M    574:U 
                                     576:M    582:U    584:M    611:U    613:M 
                                     638:U    638:U    640:U    712:U    715:U 
                                     720:M    720:U    720:U    735:U    740:U 

lstart   real*8 dummy
                <drqssbc>      DA      3:D    258:D    264:A 
                <dcrql1lt>              DU    269:D    283:D    319:U    321:U 

lstrt    int*4  <dzdrcou>     DUM   2355:D   2426:U   2429:U   2439:M 

make     log*4  dummy
                <ddkheap>      DU   1903:D   1906:D   1941:U   1964:U   2016:U 

mxs      int*4  dummy
                <drqssbc>      DA      1:D    253:D    262:A 
                <dcrql1lt>              DA    267:D    276:D    341:A 
                <drql1up>      DU    938:D    941:D    976:U 

n        int*4  dummy
                <dzdrgnv>     DUA   2610:D   2612:D   2704:U   2704:U   2718:A 
                           2730:U   2730:U   2730:U   2730:U   2731:U 
                <dzdrpoc>     DUA   2754:D   2756:D   2857:U   2857:U   2857:U 
                           2868:A   2873:U   2879:A   2891:A   2892:U   2893:A 
                           2894:A 
                <dzdrgit>     DUA   2451:D   2453:D   2564:U   2564:U   2576:U 
                           2600:A   2602:A 
                <dzdrcou>     DUA   2279:D   2281:D   2360:U   2360:U   2396:U 
                           2431:A 
                <dzdrcin>     DUA   2113:D   2115:D   2213:U   2213:U   2228:A 
                           2229:U   2229:U   2230:U   2242:U   2243:A   2251:U 
                           2252:U   2258:A   2268:U 

nacpt    int*4  <drql1nlt>               U    431:U 

nact     int*4  dummy
                <drqssbc>      DA      1:D    253:D    262:A 
                <dcrql1lt>             DUA    267:D    276:D    336:A    340:A 
                                     344:A    347:A    353:A    376:U 
                <dnewpen>      DM    882:D    885:D    919:M 
                <drql1up>      DA    937:D    942:D    981:A    982:A    983:A 
                            985:A 
                <drql1fp>     DUA    991:D    995:D   1058:A   1081:U   1082:A 
                           1101:A   1105:A 
                <drql1stp>              DU   1197:D   1200:D   1266:U   1268:U 
                                    1269:U   1326:U 
                <drql1nlt>             DUA    385:D    396:D    419:U    478:A 
                                     484:A    490:U    629:U    676:U    723:U 
                <ddelcol1>              DA   1453:D   1455:D   1493:A 
                <dresid>       DU   1498:D   1500:D   1535:U 
                <daddcol>     DUA   1610:D   1613:D   1647:U   1667:U   1669:A 
                           1675:A 
                <drql1obj>              DU   1681:D   1684:D   1734:U 
                <drql1gv>      DU   1788:D   1791:D   1839:U   1840:U   1841:U 
                           1843:U 
                <drql1rf>      DU   1391:D   1394:D   1425:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 63


nactp1   int*4  <drql1stp>             DUM   1228:D   1266:M   1275:U   1276:U 
                                    1305:U   1310:U   1343:U   1356:U   1374:U 
                                    1378:U 
                <drql1nlt>             DUM    396:D    419:M    432:U    642:U 
                <dresid>      DUM   1524:D   1535:M   1600:U   1601:U 
                <daddcol>     DUM   1637:D   1667:M   1673:U   1674:U 
                <drql1obj>             DUM   1710:D   1734:M   1739:U   1740:U 

nallq    int*4  <drql1up>    DUMA    957:D    972:M    973:U    985:A 
                <drql1fp>    DUMA   1020:D   1045:M   1046:U   1047:U   1101:A 
                           1174:U 
                <drql1stp>             DUM   1228:D   1264:M   1265:U   1283:U 
                                    1298:U   1364:U 
                <drql1nlt>             DUM    397:D    415:M    416:U    417:U 
                                     453:U    545:U 

nallq    int*4  dummy
                <drql1obj>              DU   1681:D   1684:D   1768:U 
                <drql1gv>      DU   1788:D   1791:D   1849:U   1882:U 

nalqp1   int*4  <drql1fp>      DM   1020:D   1046:M 
                <drql1nlt>              DM    397:D    416:M 

ncols    int*4  <drql1sup>             DUM    781:D    794:M    796:U    811:U 
                                     855:U    856:U 
                <dnewpen>     DUM    900:D    917:M    929:U 
                <drql1up>     DMA    957:D    973:M    982:A    985:A 
                <drql1fp>     DUM   1020:D   1047:M   1161:U   1162:U 
                <drql1stp>             DUM   1228:D   1265:M   1305:U   1310:U 
                <drql1nlt>             DUM    397:D    417:M    431:U    432:U 
                                     642:U 

ncols    int*4  dummy
                <dresid>       DU   1498:D   1500:D   1568:U   1569:U 
                <drql1obj>              DU   1681:D   1684:D   1739:U   1740:U 
                <drql1rf>      DU   1391:D   1394:D   1432:U 

neqc     int*4  dummy
                <drqssbc>      DA      1:D    254:D    262:A 
                <dcrql1lt>             DUA    267:D    276:D    334:A    336:A 
                                     340:A    344:A    347:A    354:A    378:U 
                                     378:U 
                <drql1sup>              DU    763:D    766:D    794:U    795:U 
                <dnewpen>      DU    882:D    886:D    917:U 
                <drql1up>      DU    937:D    942:D    972:U 
                <drql1fp>      DU    991:D    995:D   1045:U 
                <drql1stp>              DU   1197:D   1200:D   1264:U 
                <drql1nlt>              DU    386:D    397:D    415:U    631:U 
                                     631:U 

neqns    int*4  dummy
                <dnewpen>      DU    882:D    886:D    917:U 

ner      int*4  dummy
                <drqssbc>     DUA      2:D    253:D    256:U    263:A 
                <dcrql1lt>             DUA    268:D    276:D    280:U    335:A 
                                     336:A    341:A    344:A    347:A    353:A 
                <drql1sup>              DU    764:D    766:D    768:U    796:U 
                                     822:U 
                <dnewpen>      DU    883:D    886:D    887:U 
                <drql1up>     DUA    938:D    942:D    943:U    982:A    983:A 
                            985:A 
                <drql1fp>     DUA    991:D    995:D    997:U   1101:A 
                <drql1stp>              DU   1197:D   1200:D   1202:U 
                <drql1nlt>              DU    385:D    396:D    399:U    756:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 64

                <dresid>       DU   1498:D   1500:D   1501:U 
                <daddcol>      DU   1610:D   1613:D   1614:U 
                <drql1obj>              DU   1681:D   1684:D   1685:U 
                <drql1gv>      DU   1788:D   1791:D   1792:U 
                <drql1rf>      DU   1391:D   1394:D   1395:U 

niqc     int*4  dummy
                <drqssbc>      DA      1:D    254:D    262:A 
                <dcrql1lt>              DA    267:D    276:D    334:A    336:A 
                                     340:A    344:A    347:A    354:A 
                <drql1sup>              DU    763:D    767:D    794:U    795:U 
                <dnewpen>      DU    882:D    886:D    917:U 
                <drql1up>      DU    937:D    942:D    973:U 
                <drql1fp>      DU    991:D    995:D   1047:U 
                <drql1stp>              DU   1197:D   1200:D   1265:U 
                <drql1nlt>              DU    386:D    397:D    417:U 

niqc1    int*4  dummy
                <drqssbc>      DA      1:D    254:D    262:A 
                <dcrql1lt>             DUA    267:D    276:D    354:A    379:U 
                <drql1nlt>              DU    386:D    397:D    632:U 

nl1      int*4  dummy
                <drqssbc>      DA      1:D    254:D    262:A 
                <dcrql1lt>             DUA    267:D    276:D    297:U    334:A 
                                     340:A    344:A    347:A    354:A    377:U 
                                     378:U    378:U 
                <drql1sup>              DU    763:D    766:D    793:U 
                <drql1up>     DUA    937:D    942:D    971:U    985:A 
                <drql1fp>     DUA    991:D    995:D   1042:U   1101:A 
                <drql1stp>              DU   1197:D   1200:D   1263:U 
                <drql1nlt>              DU    386:D    396:D    414:U    630:U 
                                     631:U    631:U 
                <drql1obj>              DU   1681:D   1684:D   1733:U 
                <drql1gv>      DU   1788:D   1791:D   1835:U 
                <drql1rf>      DU   1391:D   1394:D   1424:U 

nqnp1    int*4  <drql1sup>             DUM    781:D    806:M    855:U    856:U 
                <drql1fp>     DUM   1020:D   1048:M   1161:U   1162:U 
                <drql1nlt>              DM    397:D    418:M 

nrow     int*4  dummy
                <ddelcol1>              DA   1453:D   1455:D   1493:A 

nrq      int*4  dummy
                <drqssbc>      DA      1:D    254:D    262:A 
                <dcrql1lt>             DUA    267:D    276:D    297:U    334:A 
                                     340:A    344:A    347:A    353:A    377:U 
                                     377:U    378:U    378:U 
                <drql1sup>              DU    763:D    766:D    793:U    821:U 
                <drql1up>     DUA    937:D    942:D    971:U    985:A 
                <drql1fp>     DUA    991:D    995:D   1042:U   1101:A 
                <drql1stp>              DU   1197:D   1200:D   1263:U   1280:U 
                                    1295:U 
                <drql1nlt>              DU    385:D    396:D    414:U    447:U 
                                     460:U    501:U    630:U    630:U    631:U 
                                     631:U    646:U    754:U    755:U 
                <drql1obj>              DU   1681:D   1684:D   1733:U   1761:U 
                <drql1gv>      DU   1788:D   1791:D   1835:U   1858:U   1887:U 
                <drql1rf>      DU   1391:D   1394:D   1424:U   1435:U 

nrql1    int*4  <dcrql1lt>             DMA    277:D    297:M    336:A 
                <drql1sup>             DUM    766:D    793:M    794:U    795:U 
                                     806:U    821:U    838:U    839:U 
                <drql1up>     DUM    957:D    971:M    972:U 
                <drql1fp>     DUM    996:D   1020:D   1042:M   1045:U   1048:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 65

                           1137:U 
                <drql1stp>             DUM   1200:D   1263:M   1264:U   1284:U 
                                    1299:U   1367:U 
                <drql1nlt>             DUM    397:D    414:M    415:U    418:U 
                                     465:U    652:U    667:U    754:U    755:U 
                <drql1obj>             DUM   1684:D   1733:M   1771:U   1777:U 
                <drql1gv>     DUM   1791:D   1835:M   1854:U   1884:U 
                <drql1rf>     DUM   1394:D   1424:M   1439:U 

nsol     int*4  dummy
                <drqssbc>     DUA      2:D    254:D    257:U    263:A 
                <dcrql1lt>             DUA    268:D    278:D    281:U    356:A 
                <drql1nlt>              DU    387:D    398:D    401:U    684:U 
                                     731:U 

nt       int*4  dummy
                <drqssbc>      DA      2:D    253:D    263:A 
                <dcrql1lt>            DUMA    268:D    277:D    301:M    303:U 
                                     305:U    312:U    321:U    353:A 
                <drql1nlt>             DUM    385:D    396:D    659:M    659:U 
                                     660:U    661:U    662:U    663:U    664:U 
                                     665:U    674:U    683:M    683:U    684:U 
                                     687:U    688:U    689:U    690:U    691:U 
                                     692:U    695:U    700:U    701:U    701:U 
                                     702:U    703:U    704:U    705:U    707:U 
                                     713:M    713:U    714:U    715:U    716:U 
                                     717:U    718:U    719:U    721:U    730:M 
                                     730:U    731:U    734:U    735:U    736:U 
                                     737:U    738:U    739:U    742:U    743:U 
                                     744:U    744:U    745:U    745:U    746:U 
                                     746:U    747:U    747:U    748:U    750:U 

num      int*4  <drql1stp>            DUMA   1228:D   1267:M   1325:M   1325:U 
                                    1326:U   1330:U   1333:U   1343:A   1350:U 
                                    1355:U 

numnac   int*4  <drql1stp>             DUM   1228:D   1326:M   1327:U   1328:U 

nvars    int*4  dummy
                <drqssbc>     DUA      1:D    254:D    257:U    262:A 
                <dcrql1lt>             DUA    267:D    276:D    281:U    334:A 
                                     336:A    340:A    342:A    344:A    346:A 
                                     347:A    353:A    354:A    355:U 
                <drql1sup>              DU    763:D    767:D    795:U    796:U 
                                     796:U    808:U    809:U    810:U    812:U 
                                     813:U    813:U    814:U    814:U    841:U 
                                     858:U 
                <dnewpen>      DA    882:D    886:D    930:A 
                <drql1up>      DA    937:D    942:D    981:A    982:A    983:A 
                            985:A 
                <drql1fp>     DUA    991:D    995:D   1050:U   1058:A   1064:A 
                           1065:A   1066:A   1082:A   1101:A   1105:A   1108:A 
                           1139:U   1164:U 
                <drql1stp>              DA   1197:D   1200:D   1271:A   1278:A 
                                    1287:A   1293:A   1302:A   1313:A   1351:A 
                                    1352:A   1353:A   1354:A   1385:A 
                <drql1nlt>             DUA    385:D    396:D    401:U    429:A 
                                     430:A    436:U    442:U    448:A    449:A 
                                     454:A    461:A    466:A    471:A    478:A 
                                     484:A    494:U    500:U    674:A    705:A 
                                     707:A    721:A    748:A    750:A 
                <dresid>      DUA   1498:D   1500:D   1571:A   1573:U 
                <daddcol>     DUA   1610:D   1613:D   1646:U   1669:A   1670:A 
                           1671:A   1675:A 
                <drql1obj>              DA   1681:D   1684:D   1737:A   1738:A 
                                    1781:A   1782:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 66

                <drql1gv>      DA   1788:D   1791:D   1890:A 
                <drql1rf>      DA   1391:D   1394:D   1433:A 

nzzr     int*4  dummy
                <drql1up>     DUA    938:D    942:D    945:U    981:A    983:A 
                <drql1fp>     DUA    992:D    995:D    999:U   1058:A   1082:A 
                           1105:A 
                <drql1nlt>             DUA    386:D    396:D    399:U    478:A 
                                     484:A 
                <dzdrgnv>      DU   2610:D   2612:D   2614:U   2704:U 
                <ddelcol1>             DUA   1453:D   1455:D   1456:U   1493:A 
                <daddcol>     DUA   1610:D   1613:D   1615:U   1669:A   1675:A 
                <dzdrpoc>      DU   2754:D   2756:D   2758:U   2857:U 
                <dzdrgit>      DU   2451:D   2453:D   2455:U   2564:U 
                <drql1rf>      DU   1392:D   1394:D   1396:U 
                <dzdrcou>      DU   2279:D   2281:D   2283:U   2360:U 
                <dzdrcin>      DU   2113:D   2115:D   2117:U   2213:U 

oct      real*8 <drql1sup>              DI    782:D    784:I 
                <dnewpen>     DIU    901:D    907:I    923:U 

once     log*4  <ddkheap>     DUM   1928:D   1944:M   1964:U   1967:M 

one      real*8 <dcrql1lt>             DIU    281:D    291:I    306:U    308:U 
                                     331:U    359:U 
                <dnewpen>      DI    901:D    906:I 
                <drql1up>      DI    958:D    960:I 
                <drql1stp>             DIU   1229:D   1234:I   1279:U   1281:U 
                                    1294:U   1296:U   1315:U   1315:U   1319:U 
                                    1362:U 
                <drql1nlt>             DIU    399:D    410:I    422:U    434:U 
                                     448:U    461:U    547:U    559:U    573:U 
                                     581:U    645:U    647:U    695:U 
                <dzdrgnv>     DIU   2696:D   2700:I   2739:U 
                <drql1obj>             DIU   1711:D   1726:I   1743:U   1747:U 
                                    1748:U   1753:U   1762:U 
                <drql1gv>     DIU   1817:D   1821:I   1836:U   1859:U   1859:U 
                           1865:U   1888:U 
                <dzdrgit>     DIU   2547:D   2559:I   2583:U 
                <drql1rf>     DIU   1414:D   1419:I   1434:U   1436:U 

one      real*8 in equivalence  drql1fp/EQ01 offset:0
                <drql1fp>    DEIU   1022:D   1035:E   1037:I   1064:U 
                <dzdrcin>    DEIU   2194:D   2206:E   2208:I   2231:U 

ope      real*8 <drql1gv>     DUM   1817:D   1836:M   1857:U 

p        real*8 dummy array size: 8 bytes
                <drql1fp>      DA    992:D    997:D   1058:A   1064:A   1065:A 
                           1105:A   1108:A 
                <drql1stp>              DA   1198:D   1202:D   1271:A   1278:A 
                                    1293:A   1313:A   1351:A   1352:A   1353:A 
                                    1385:A 

param    real*8 array size: 40 bytes
                <dzdrcou>      DA   2356:D   2426:A   2430:A   2431:A 
                <dzdrcin>      DA   2194:D   2255:A   2258:A 

pen      real*8 <dcrql1lt>              DA    288:D    341:A 

pen      real*8 dummy
                <drql1up>      DA    938:D    943:D    986:A 
                <drql1obj>             DUM   1682:D   1685:D   1736:M   1775:M 
                                    1775:U 

penal    real*8 <drql1nlt>             DUM    404:D    628:M    653:M    653:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 67

                                     664:U    691:U    718:U    738:U 

penpar   real*8 <dcrql1lt>            DUMA    288:D    331:M    335:A    337:A 
                                     341:A    345:A    348:A    352:U    356:A 
                                     359:M    366:U 

penpar   real*8 dummy
                <drql1sup>               D    764:D    768:D 
                <dnewpen>     DUM    883:D    887:D    923:M    923:U 
                <drql1up>      DA    938:D    943:D    986:A 
                <drql1fp>     DUA    992:D    998:D   1080:U   1102:A   1135:U 
                <drql1stp>              DU   1198:D   1203:D   1285:U   1300:U 
                                    1368:U 
                <drql1nlt>               D    387:D    402:D 
                <drql1obj>              DU   1682:D   1685:D   1773:U   1778:U 
                                    1779:U 
                <drql1gv>      DU   1789:D   1792:D   1855:U   1885:U   1888:U 

pnrm     real*8 <drql1fp>     DUM   1022:D   1065:M   1080:U   1103:M   1108:M 
                           1135:U 
                <drql1stp>             DUM   1229:D   1353:M   1371:U 

poc      real*8 dummy array size: 8 bytes
                <dzdrpoc>      DA   2754:D   2758:D   2868:A   2879:A   2891:A 
                           2894:A 

prjnrm   real*8 <daddcol>     DUM   1639:D   1671:M   1672:U 

prod     real*8 <drql1fp>     DUM   1022:D   1140:M   1141:U   1142:U   1165:M 
                           1166:U   1167:U 
                <drql1nlt>             DUM    404:D    437:M    438:U    439:U 
                                     495:M    496:U    497:U 
                <dresid>      DUM   1525:D   1574:M   1575:U   1576:U 

psw      log*4  dummy
                <drqssbc>      DA      1:D    255:D    262:A 
                <dcrql1lt>              DA    268:D    279:D    356:A 
                <drql1nlt>               D    387:D    395:D 

pte      real*8 dummy array size: 8 bytes
                <dnewpen>      DM    883:D    887:D    931:M 
                <drql1stp>             DUM   1198:D   1203:D   1271:M   1314:M 
                                    1370:U 

ptex     int*4  <dcrql1lt>             DUA    287:D    334:A    337:U    348:U 

ptex     int*4  dummy
                <drql1sup>             DUM    764:D    767:D    810:M    811:U 

ptg      real*8 <drql1stp>              DM   1229:D   1351:M 

ptg1     real*8 <drql1stp>             DUM   1229:D   1352:M   1370:M   1370:U 
                                    1371:U 

px       int*4  <dcrql1lt>             DUA    287:D    334:A    345:U    348:U 
                                     354:U 

px       int*4  dummy
                <drql1sup>             DUM    763:D    767:D    809:M    810:U 

ratio    real*8 <drql1stp>             DUM   1230:D   1324:M   1330:U 

res      real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    256:D    263:A 
                <dcrql1lt>              DA    268:D    280:D    337:A    341:A 
                                     345:A    348:A    353:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 68

                <dnewpen>      DM    883:D    887:D    930:M 
                <drql1up>      DA    938:D    945:D    982:A    986:A 
                <drql1fp>      DU    992:D    999:D   1145:U   1175:U   1181:U 
                <drql1stp>              DU   1198:D   1203:D   1312:U   1357:U 
                                    1362:U 
                <drql1nlt>              DU    385:D    399:D    434:U    443:U 
                                     644:U 
                <dresid>       DM   1498:D   1501:D   1544:M   1581:M   1588:M 
                <drql1obj>              DU   1682:D   1685:D   1742:U 
                <drql1rf>      DM   1392:D   1395:D   1438:M 

resid    real*8 <drql1stp>             DUM   1230:D   1312:M   1315:U   1315:U 
                                    1317:M   1317:U   1320:U   1324:U 

rj       real*8 <dzdrcou>    DUMA   2356:D   2425:M   2426:A   2427:U 

rr       real*8 dummy array size: 8 bytes
                <drql1up>      DA    938:D    945:D    981:A    983:A 
                <drql1fp>      DA    992:D    999:D   1082:A   1105:A 
                <drql1nlt>              DA    386:D    400:D    478:A    484:A 
                <dzdrgnv>     DUA   2610:D   2614:D   2734:U   2737:A 
                <ddelcol1>              DA   1453:D   1456:D   1493:A 
                <daddcol>      DA   1610:D   1614:D   1675:A 
                <dzdrgit>     DUA   2451:D   2455:D   2578:U   2590:A 
                <drql1rf>       D   1392:D   1395:D 
                <dzdrcou>    DUMA   2279:D   2283:D   2404:M   2404:U   2425:U 
                           2426:A   2427:M   2429:A   2429:A 
                <dzdrcin>      DM   2113:D   2117:D   2270:M 

rrj      real*8 <dzdrgit>     DUM   2547:D   2578:M   2583:U   2584:U   2588:U 

rrx      int*4  <dcrql1lt>             DUA    287:D    335:A    342:U    346:U 
                                     354:U 

rrx      int*4  dummy
                <drql1sup>             DUM    764:D    767:D    812:M    813:U 

s        real*8 <drql1gv>     DUM   1817:D   1865:M   1880:U   1883:U 

sgn      real*8 <drql1nlt>            DUMA    399:D    434:M    444:M    448:U 
                                     453:U    454:A    461:U    466:U    470:U 
                                     471:A 

sgn1     real*8 <drql1stp>            DUMA   1204:D   1279:M   1281:M   1281:U 
                                    1283:U   1285:M   1285:U   1287:A   1294:M 
                                    1296:M   1296:U   1298:U   1300:M   1300:U 
                                    1302:A 

sol      real*8 dummy array
                <drqssbc>      DA      2:D    257:D    263:A 
                <dcrql1lt>             DMA    268:D    281:D    303:M    305:M 
                                     312:M    321:M    356:A 
                <drql1nlt>            DUMA    387:D    400:D    660:M    661:M 
                                     662:M    663:M    664:M    665:M    674:A 
                                     687:M    688:M    689:M    690:M    691:M 
                                     692:M    695:M    696:M    697:M    698:M 
                                     699:M    700:M    701:M    701:U    702:M 
                                     703:M    704:M    705:A    707:A    714:M 
                                     715:M    716:M    717:M    718:M    719:M 
                                     721:A    734:M    735:M    736:M    737:M 
                                     738:M    739:M    742:M    743:M    744:M 
                                     744:U    745:M    745:U    746:M    746:U 
                                     747:M    747:U    748:A    750:A 

sol      real*8 dummy array size: 8 bytes
                <dzdrgnv>    DUMA   2610:D   2614:D   2718:M   2735:U   2737:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 69

                           2744:M 
                <dzdrgit>      DA   2451:D   2455:D   2600:A   2602:A 

t        real*8 <ddkheap>     DUM   1929:D   1955:M   1969:M   2000:U   2008:U 
                           2012:U 

t        real*8 dummy
                <dcrql1lt>              DU    268:D    281:D    302:U    303:U 
                                     306:U    306:U    320:U 

tden     real*8 <dzdrgnv>     DUM   2696:D   2734:M   2739:U   2740:U   2744:U 

temp     real*8 <dresid>      DUM   1525:D   1571:M   1580:U   1581:U 

test     real*8 <drql1fp>     DUM   1022:D   1138:M   1141:U   1142:M   1145:U 
                           1163:M   1166:U   1167:M   1172:M   1172:U   1175:U 
                           1181:U 
                <drql1nlt>             DUM    404:D    435:M    438:U    439:M 
                                     442:M    442:U    443:U    493:M    496:U 
                                     497:M    500:M    500:U    520:U    531:U 
                                     548:U    560:U    594:U    607:U 
                <dresid>      DUM   1525:D   1572:M   1575:U   1576:M   1579:M 
                           1579:U   1580:U 

thet     real*8 <drql1nlt>             DUM    400:D    420:M    461:U    504:U 
                                     511:U    519:U    530:U    552:U    564:U 
                                     598:U    714:U    734:U    742:U 

theta    real*8 dummy
                <drql1up>      DA    939:D    944:D    986:A 
                <drql1fp>      DA    992:D    999:D   1102:A 
                <drql1stp>              DU   1198:D   1204:D   1281:U   1296:U 
                <drql1obj>              DU   1682:D   1685:D   1762:U 
                <drql1gv>      DU   1789:D   1792:D   1859:U   1888:U 
                <drql1rf>      DU   1392:D   1397:D   1436:U 

three    real*8 <drql1obj>             DIU   1711:D   1728:I   1747:U   1752:U 

tl       real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    257:D    263:A    263:A 

tmax     real*8 <dcrql1lt>             DMA    281:D    308:M    353:A 

tmax     real*8 dummy
                <drql1nlt>              DU    385:D    399:D    658:U    693:U 

tmin     real*8 dummy
                <drqssbc>      DA      3:D    258:D    264:A 
                <dcrql1lt>             DUA    269:D    281:D    310:U    312:U 
                                     353:A 
                <drql1nlt>               D    385:D    399:D 

tmp      real*8 <drql1sup>             DUM    782:D    840:M    842:M    842:U 
                                     844:U    847:U    848:U    857:M    859:M 
                                     859:U    861:U    864:U    865:U 
                <drql1stp>             DUM   1230:D   1358:M   1362:M   1365:M 
                                    1365:U   1368:M   1368:U   1370:U 
                <drql1nlt>             DUM    400:D    503:M    504:U    504:U 
                                     505:U    510:M    511:U    511:U    513:U 
                                     519:M    522:M    524:U    524:U    525:U 
                                     530:M    533:M    535:U    535:U    537:U 
                                     547:M    550:M    552:U    552:U    554:U 
                                     559:M    562:M    564:U    564:U    566:U 
                                     573:M    574:U    574:U    576:U    581:M 
                                     582:U    582:U    584:U    593:M    596:M 
                                     598:U    598:U    600:U    606:M    609:M 
Cross Reference                Fri Apr 19 20:07:44 2002                page 70

                                     611:U    611:U    613:U    638:M    639:U 
                                     644:M    645:U    648:U    653:U 
                <drql1obj>             DUM   1711:D   1742:M   1743:U   1772:U 
                                    1773:M   1773:U   1775:U 
                <drql1gv>    DUMA   1817:D   1850:M   1857:M   1859:M   1859:U 
                           1862:U   1866:U   1883:M   1885:M   1885:U   1888:M 
                           1888:U   1890:A 
                <drql1rf>     DUM   1414:D   1433:M   1434:U   1438:U   1440:U 

tmpsav   real*8 <drql1gv>     DUM   1817:D   1838:M   1862:U   1866:M 

tnum     real*8 <dzdrgnv>     DUM   2696:D   2735:M   2737:M   2737:U   2740:U 
                           2744:U 

tnxt     real*8 <dcrql1lt>             DMA    283:D    302:M    310:M    342:A 
                                     346:A    348:A    356:A 

tnxt     real*8 dummy
                <drql1nlt>             DUM    387:D    400:D    420:U    422:M 
                                     504:U    505:M    511:U    513:M    552:U 
                                     554:M    564:U    566:M    598:U    600:M 
                                     658:U    660:U    666:U    668:M    668:U 
                                     672:M    672:U    687:U    693:U 

tol      real*8 <dresid>      DUM   1525:D   1534:M   1579:U 

told     real*8 <dcrql1lt>             DMA    288:D    311:M    320:M    357:A 

told     real*8 dummy
                <drql1nlt>             DUM    388:D    404:D    647:U    666:M 

toler    real*8 dummy
                <drqssbc>      DA      2:D    257:D    263:A 
                <dcrql1lt>             DUA    268:D    282:D    308:U    315:U 
                                     316:U    356:A 
                <drql1nlt>               D    388:D    402:D 

topx     int*4  <dcrql1lt>             DUA    287:D    335:A    342:U    346:U 
                                     348:U    355:U    355:U 
                <drql1fp>     DUM   1020:D   1050:M   1106:U 
                <daddcol>      DM   1637:D   1646:M 

topx     int*4  dummy
                <drql1sup>              DM    764:D    767:D    814:M 

two      real*8 <drql1stp>             DIU   1230:D   1235:I   1281:U   1296:U 
                                    1365:U 
                <drql1nlt>             DIU    402:D    412:I    449:U    461:U 
                                     503:U    503:U    510:U    519:U    530:U 
                                     530:U    647:U    699:U    704:U 
                <drql1obj>             DIU   1711:D   1727:I   1752:U   1762:U 
                <drql1gv>     DIU   1817:D   1822:I   1859:U   1888:U 
                <drql1rf>     DIU   1414:D   1420:I   1436:U 

unity    real*8 array in equivalence  drql1fp/EQ01 offset:0 size: 8 bytes
                <drql1fp>      DE   1034:D   1035:E 
                <dzdrcin>     DEA   2205:D   2206:E   2228:A 

w        real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    256:D    263:A 
                <dcrql1lt>              DA    268:D    280:D    337:A    341:A 
                                     341:A    342:A    342:A    342:A    342:A 
                                     345:A    345:A    345:A    346:A    346:A 
                                     346:A    348:A    348:A    348:A    348:A 
                                     349:A    354:A    354:A    354:A    354:A 
                                     354:A    355:A 
Cross Reference                Fri Apr 19 20:07:44 2002                page 71

                <drql1up>      DA    939:D    945:D    984:A 
                <drql1fp>      DA    992:D    999:D   1082:A   1102:A   1105:A 
                           1106:A 
                <daddcol>      DA   1611:D   1615:D   1669:A   1671:A   1675:A 
                <dzdrgit>    DUMA   2451:D   2455:D   2574:A   2579:U   2588:M 
                           2590:U   2590:A   2602:A 
                <drql1rf>       D   1392:D   1395:D 
                <dzdrcin>    DUMA   2113:D   2117:D   2243:M   2254:U   2255:A 
                           2256:M   2270:U 

wgt      real*8 <drql1nlt>             DUM    404:D    645:M    647:M    647:U 
                                     648:U 
                <drql1obj>            DUMA   1711:D   1743:M   1744:U   1748:M 
                                    1753:M   1757:M   1762:M   1762:U   1763:U 
                                    1768:U   1772:U   1775:U   1778:M   1778:U 
                                    1781:A 
                <drql1rf>     DUM   1397:D   1434:M   1436:M   1436:U   1440:U 

wgt1     real*8 <drql1obj>            DUMA   1711:D   1744:M   1746:M   1747:U 
                                    1752:U   1763:M   1766:M   1770:U   1779:M 
                                    1779:U   1782:A 

wi       real*8 <dzdrpoc>     DMA   2838:D   2893:M   2894:A 
                <dzdrgit>     DUM   2547:D   2579:M   2584:U   2588:U 
                <dzdrcin>    DUMA   2194:D   2254:M   2255:A   2256:U 

x        real*8 dummy array size: 8 bytes
                <drqssbc>      DA      2:D    256:D    263:A 
                <dcrql1lt>              DA    268:D    280:D    337:A    341:A 
                                     344:A    348:A    356:A 
                <dnewpen>      DA    883:D    887:D    930:A 
                <drql1up>      DA    938:D    945:D    982:A 
                <drql1fp>      DU    991:D    999:D   1140:U   1165:U 
                <drql1stp>              DA   1198:D   1203:D   1385:A 
                <drql1nlt>             DUA    387:D    402:D    437:U    495:U 
                                     674:A    705:A    707:A    721:A    748:A 
                                     750:A 
                <dresid>      DUA   1498:D   1501:D   1571:A   1574:U 
                <drql1rf>      DA   1391:D   1395:D   1433:A 

zero     real*8 <dcrql1lt>             DIU    281:D    290:I    306:U    311:U 
                                     314:U 
                <drql1sup>             DIU    782:D    785:I    836:U    837:U 
                                     840:U    844:U    857:U    861:U 
                <dnewpen>     DIU    901:D    905:I    922:U    931:U 
                <drql1up>      DI    958:D    961:I 
                <drql1stp>             DIU   1230:D   1236:I   1261:U   1283:U 
                                    1298:U   1316:U   1357:U   1358:U 
                <drql1nlt>            DIUA    399:D    411:I    429:A    430:A 
                                     444:U    453:U    470:U    627:U    628:U 
                                     639:U    679:U    696:U    697:U    698:U 
                                     702:U    703:U    726:U 
                <dresid>      DIU   1525:D   1529:I   1544:U   1588:U 
                <drql1gv>     DIU   1817:D   1823:I   1838:U   1848:U 
                <drql1rf>     DIU   1414:D   1418:I   1431:U 

zero     real*8 in equivalence  drql1fp/EQ02 offset:0
                <drql1fp>    DEIU   1022:D   1035:E   1038:I   1103:U 
                <drql1obj>            DEIU   1711:D   1723:E   1729:I   1735:U 
                                    1736:U   1757:U   1766:U   1768:U   1770:U 
                <dzdrcin>     DEI   2194:D   2206:E   2209:I 
                <dzdrgit>     DEI   2547:D   2557:E   2560:I 
                <dzdrpoc>     DEI   2838:D   2850:E   2852:I 

zip      real*8 array in equivalence  drql1fp/EQ02 offset:0 size: 8 bytes
                <drql1fp>      DE   1034:D   1035:E 
Cross Reference                Fri Apr 19 20:07:44 2002                page 72

                <drql1obj>             DEA   1722:D   1723:E   1737:A   1738:A 
                <dzdrcin>     DEA   2205:D   2206:E   2229:A 
                <dzdrgit>     DEA   2556:D   2557:E   2600:A 
                <dzdrpoc>     DEA   2849:D   2850:E   2879:A   2891:A 

zz       real*8 dummy array
                <drql1up>      DA    938:D    945:D    981:A    983:A 
                <drql1fp>      DA    992:D    999:D   1058:A   1082:A   1105:A 
                <drql1nlt>              DA    386:D    399:D    478:A    484:A 
                <dzdrgnv>      DA   2610:D   2614:D   2718:A 
                <ddelcol1>              DA   1453:D   1456:D   1493:A 
                <daddcol>      DA   1610:D   1615:D   1669:A   1675:A 
                <dzdrpoc>      DA   2754:D   2758:D   2893:A   2894:A 
                <dzdrgit>      DA   2451:D   2455:D   2602:A 
                <drql1rf>       D   1392:D   1395:D 
                <dzdrcou>      DA   2279:D   2283:D   2431:A   2431:A 
                <dzdrcin>     DMA   2113:D   2117:D   2229:A   2231:M   2243:A 
                           2258:A   2258:A 

zzx      int*4  <dcrql1lt>             DUA    287:D    335:A    341:U    345:U 
                                     354:U 

zzx      int*4  dummy
                <drql1sup>             DUM    764:D    767:D    813:M    814:U 
Cross Reference                Fri Apr 19 20:07:44 2002                page 73


 Format and Executable Labels
 ----------------------------

10              <drql1sup>              DU    845:U    852:D 
                <drql1fp>      DU   1182:U   1187:D 

20              <drql1sup>              DU    851:U    855:D 
                <drql1fp>      DU   1176:U   1189:D 

30              <drql1sup>              DU    862:U    869:D 

40              <drql1sup>              DU    868:U    877:D 

140             <drql1stp>              DU   1372:U   1378:D 

150             <dzdrgit>      DU   2585:U   2606:D 

160             <dzdrgnv>      DU   2741:U   2750:D 

23000           <dcrql1lt>              DU    306:U    313:D 

23002           <dcrql1lt>              DU    314:U    322:D 

23004           <dcrql1lt>              DU    323:U    330:D 

23006           <dcrql1lt>              DU    333:D    373:U 

23007           <dcrql1lt>               D    373:D 

23008           <dcrql1lt>              DU    361:U    368:U    374:D 

23009           <dcrql1lt>              DU    339:D    350:U 

23010           <dcrql1lt>               D    350:D 

23012           <dcrql1lt>              DU    352:U    365:D 

23013           <dcrql1lt>              DU    363:U    370:D 

23014           <dcrql1lt>              DU    360:U    362:D 

23016           <dcrql1lt>              DU    366:U    369:D 

23018           <dcrql1lt>              DU    376:U    382:D 

23020           <dcrql1lt>              DU    379:U    381:D 

23022           <drql1nlt>              DU    421:U    423:D 

23024           <drql1nlt>              DU    425:U    427:D 

23026           <drql1nlt>              DU    428:U    625:D 

23028           <drql1nlt>              DU    431:U    477:D 

23030           <drql1nlt>              DU    432:U    476:D 

23032           <drql1nlt>              DU    436:U    441:D 

23034           <drql1nlt>              DU    438:U    440:D 

23036           <drql1nlt>              DU    443:U    445:D 

23038           <drql1nlt>              DU    446:U    459:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 74

23039           <drql1nlt>              DU    457:U    475:D 

23040           <drql1nlt>              DU    447:U    452:D 

23041           <drql1nlt>              DU    450:U    456:D 

23042           <drql1nlt>              DU    453:U    455:D 

23044           <drql1nlt>              DU    460:U    464:D 

23045           <drql1nlt>              DU    462:U    474:D 

23046           <drql1nlt>              DU    465:U    469:D 

23047           <drql1nlt>              DU    467:U    473:D 

23048           <drql1nlt>              DU    470:U    472:D 

23050           <drql1nlt>              DU    479:U    483:D 

23051           <drql1nlt>              DU    481:U    621:D 

23052           <drql1nlt>              DU    485:U    489:D 

23053           <drql1nlt>              DU    487:U    620:D 

23054           <drql1nlt>              DU    490:U    619:D 

23056           <drql1nlt>              DU    494:U    499:D 

23058           <drql1nlt>              DU    496:U    498:D 

23060           <drql1nlt>              DU    501:U    544:D 

23061           <drql1nlt>              DU    542:U    618:D 

23062           <drql1nlt>              DU    502:U    518:D 

23063           <drql1nlt>              DU    516:U    541:D 

23064           <drql1nlt>              DU    504:U    509:D 

23065           <drql1nlt>              DU    507:U    515:D 

23066           <drql1nlt>              DU    511:U    514:D 

23068           <drql1nlt>              DU    520:U    523:D 

23070           <drql1nlt>              DU    524:U    529:D 

23071           <drql1nlt>              DU    527:U    540:D 

23072           <drql1nlt>              DU    531:U    534:D 

23074           <drql1nlt>              DU    535:U    539:D 

23076           <drql1nlt>              DU    545:U    591:D 

23077           <drql1nlt>              DU    589:U    617:D 

23078           <drql1nlt>              DU    546:U    572:D 

23079           <drql1nlt>              DU    570:U    588:D 

23080           <drql1nlt>              DU    548:U    551:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 75

23082           <drql1nlt>              DU    552:U    558:D 

23083           <drql1nlt>              DU    556:U    569:D 

23084           <drql1nlt>              DU    560:U    563:D 

23086           <drql1nlt>              DU    565:U    568:D 

23088           <drql1nlt>              DU    574:U    580:D 

23089           <drql1nlt>              DU    578:U    587:D 

23090           <drql1nlt>              DU    583:U    586:D 

23092           <drql1nlt>              DU    592:U    605:D 

23093           <drql1nlt>              DU    603:U    616:D 

23094           <drql1nlt>              DU    594:U    597:D 

23096           <drql1nlt>              DU    598:U    602:D 

23098           <drql1nlt>              DU    607:U    610:D 

23100           <drql1nlt>              DU    611:U    615:D 

23102           <drql1nlt>              DU    629:U    637:D 

23104           <drql1nlt>              DU    632:U    636:D 

23106           <drql1nlt>              DU    639:U    641:D 

23108           <drql1nlt>              DU    642:U    656:D 

23110           <drql1nlt>              DU    646:U    651:D 

23111           <drql1nlt>              DU    649:U    655:D 

23112           <drql1nlt>              DU    652:U    654:D 

23114           <drql1nlt>              DU    657:U    711:D 

23115           <drql1nlt>              DU    709:U    752:D 

23116           <drql1nlt>              DU    658:U    682:D 

23117           <drql1nlt>              DU    680:U    708:D 

23118           <drql1nlt>              DU    667:U    671:D 

23119           <drql1nlt>              DU    669:U    673:D 

23120           <drql1nlt>              DU    684:U    686:D 

23122           <drql1nlt>              DU    693:U    706:D 

23124           <drql1nlt>              DU    712:U    729:D 

23125           <drql1nlt>              DU    727:U    751:D 

23126           <drql1nlt>              DU    731:U    733:D 

23128           <drql1nlt>              DU    740:U    749:D 

23130           <drql1nlt>              DU    754:U    760:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 76

23132           <drql1nlt>              DU    755:U    759:D 

23134           <drql1nlt>              DU    756:U    758:D 

23136           <drql1sup>              DU    796:U    800:D 

23137           <drql1sup>              DU    798:U    879:D 

23138           <drql1sup>              DU    820:U    835:D 

23140           <drql1sup>              DU    821:U    825:D 

23142           <drql1sup>              DU    822:U    824:D 

23144           <drql1sup>              DU    838:U    854:D 

23146           <drql1sup>              DU    839:U    850:D 

23148           <drql1sup>              DU    841:U    843:D 

23150           <drql1sup>              DU    844:U    846:D 

23152           <drql1sup>              DU    847:U    849:D 

23154           <drql1sup>              DU    855:U    876:D 

23156           <drql1sup>              DU    856:U    867:D 

23158           <drql1sup>              DU    858:U    860:D 

23160           <drql1sup>              DU    861:U    863:D 

23162           <drql1sup>              DU    864:U    866:D 

23164           <dnewpen>      DU    916:U    934:D 

23166           <dnewpen>      DU    929:U    933:D 

23168           <drql1up>      DU    974:U    988:D 

23170           <drql1up>      DU    976:U    980:D 

23171           <drql1up>      DU    978:U    987:D 

23172           <drql1fp>      DU   1044:U   1194:D 

23174           <drql1fp>      DU   1059:U   1063:D 

23175           <drql1fp>      DU   1061:U   1193:D 

23176           <drql1fp>      DU   1080:U   1192:D 

23178           <drql1fp>      DU   1081:U   1151:D 

23180           <drql1fp>      DU   1084:U   1088:D 

23181           <drql1fp>       D   1150:D 

23182           <drql1fp>      DU   1104:U   1134:D 

23184           <drql1fp>      DU   1107:U   1109:D 

23186           <drql1fp>      DU   1110:U   1113:D 

23188           <drql1fp>      DU   1135:U   1149:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 77

23190           <drql1fp>      DU   1137:U   1148:D 

23192           <drql1fp>      DU   1139:U   1144:D 

23194           <drql1fp>      DU   1141:U   1143:D 

23196           <drql1fp>      DU   1145:U   1147:D 

23198           <drql1fp>      DU   1154:U   1191:D 

23200           <drql1fp>      DU   1161:U   1190:D 

23202           <drql1fp>      DU   1162:U   1185:D 

23204           <drql1fp>      DU   1164:U   1169:D 

23206           <drql1fp>      DU   1166:U   1168:D 

23208           <drql1fp>      DU   1174:U   1180:D 

23209           <drql1fp>      DU   1178:U   1184:D 

23210           <drql1fp>      DU   1175:U   1177:D 

23212           <drql1fp>      DU   1181:U   1183:D 

23214           <drql1stp>              DU   1262:U   1388:D 

23216           <drql1stp>              DU   1268:U   1274:D 

23218           <drql1stp>              DU   1269:U   1272:D 

23220           <drql1stp>              DU   1275:U   1290:D 

23222           <drql1stp>              DU   1276:U   1289:D 

23224           <drql1stp>              DU   1280:U   1282:D 

23226           <drql1stp>              DU   1283:U   1288:D 

23228           <drql1stp>              DU   1284:U   1286:D 

23230           <drql1stp>              DU   1291:U   1304:D 

23232           <drql1stp>              DU   1295:U   1297:D 

23234           <drql1stp>              DU   1298:U   1303:D 

23236           <drql1stp>              DU   1299:U   1301:D 

23238           <drql1stp>              DU   1305:U   1309:D 

23239           <drql1stp>              DU   1307:U   1387:D 

23240           <drql1stp>              DU   1310:U   1321:U   1332:D 

23242           <drql1stp>              DU   1316:U   1331:D 

23244           <drql1stp>              DU   1319:U   1323:D 

23246           <drql1stp>              DU   1320:U   1322:D 

23248           <drql1stp>              DU   1333:U   1337:D 

23249           <drql1stp>              DU   1335:U   1386:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 78

23250           <drql1stp>              DU   1355:U   1375:D 

23252           <drql1stp>              DU   1357:U   1361:D 

23253           <drql1stp>              DU   1359:U   1363:D 

23254           <drql1stp>              DU   1364:U   1366:D 

23256           <drql1stp>              DU   1367:U   1369:D 

23258           <drql1stp>              DU   1371:U   1373:D 

23260           <drql1rf>      DU   1425:U   1444:D 

23262           <drql1rf>      DU   1426:U   1430:D 

23263           <drql1rf>      DU   1428:U   1443:D 

23264           <drql1rf>      DU   1432:U   1442:D 

23266           <drql1rf>      DU   1435:U   1437:D 

23268           <drql1rf>      DU   1439:U   1441:D 

23270           <ddelcol1>              DU   1485:U   1495:D 

23272           <ddelcol1>              DU   1488:U   1490:D 

23274           <dresid>       DU   1536:U   1566:D 

23276           <dresid>       DU   1542:U   1545:D 

23278           <dresid>       DU   1568:U   1599:D 

23280           <dresid>       DU   1569:U   1590:D 

23282           <dresid>       DU   1573:U   1578:D 

23284           <dresid>       DU   1575:U   1577:D 

23286           <dresid>       DU   1580:U   1584:D 

23287           <dresid>       DU   1582:U   1589:D 

23288           <dresid>       DU   1600:U   1607:D 

23290           <dresid>       DU   1601:U   1606:D 

23292           <daddcol>      DU   1648:U   1678:D 

23294           <daddcol>      DU   1666:U   1677:D 

23296           <daddcol>      DU   1672:U   1676:D 

23298           <drql1obj>              DU   1739:U   1785:D 

23300           <drql1obj>              DU   1740:U   1784:D 

23302           <drql1obj>              DU   1745:U   1760:D 

23304           <drql1obj>              DU   1747:U   1751:D 

23305           <drql1obj>              DU   1749:U   1759:D 

23306           <drql1obj>              DU   1752:U   1756:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 79

23307           <drql1obj>              DU   1754:U   1758:D 

23308           <drql1obj>              DU   1761:U   1764:D 

23310           <drql1obj>              DU   1765:U   1767:D 

23312           <drql1obj>              DU   1768:U   1783:D 

23314           <drql1obj>              DU   1770:U   1776:D 

23316           <drql1obj>              DU   1771:U   1774:D 

23318           <drql1obj>              DU   1777:U   1780:D 

23320           <drql1gv>      DU   1839:U   1893:D 

23322           <drql1gv>      DU   1841:U   1868:D 

23324           <drql1gv>      DU   1843:U   1845:D 

23326           <drql1gv>      DU   1849:U   1853:D 

23327           <drql1gv>      DU   1851:U   1861:D 

23328           <drql1gv>      DU   1854:U   1856:D 

23330           <drql1gv>      DU   1858:U   1860:D 

23332           <drql1gv>      DU   1862:U   1867:D 

23334           <drql1gv>      DU   1879:U   1892:D 

23336           <drql1gv>      DU   1882:U   1891:D 

23338           <drql1gv>      DU   1884:U   1886:D 

23340           <drql1gv>      DU   1887:U   1889:D 

23342           <ddkheap>      DU   1933:U   2015:D 

23343           <ddkheap>      DU   2013:U   2019:D 

23344           <ddkheap>      DU   1941:U   1943:D 

23346           <ddkheap>      DU   1946:D   2009:U 

23347           <ddkheap>       D   2009:D 

23348           <ddkheap>      DU   1974:U   2010:D 

23349           <ddkheap>      DU   1947:U   1958:D 

23350           <ddkheap>      DU   1956:U   1976:D 

23351           <ddkheap>      DU   1964:U   1966:D 

23353           <ddkheap>      DU   1973:U   1975:D 

23355           <ddkheap>      DU   1986:D   2005:U 

23356           <ddkheap>       D   2005:D 

23357           <ddkheap>      DU   1997:U   2001:U   2006:D 

23358           <ddkheap>      DU   1989:U   1995:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 80

23359           <ddkheap>      DU   1993:U   1999:D 

23360           <ddkheap>      DU   1990:U   1992:D 

23362           <ddkheap>      DU   1996:U   1998:D 

23364           <ddkheap>      DU   2000:U   2002:D 

23366           <ddkheap>      DU   2016:U   2018:D 

23368           <dunif01>      DU   2097:U   2107:D 

23370           <dunif01>      DU   2099:U   2101:D 

23372           <dzdrcin>      DU   2213:U   2217:D 

23373           <dzdrcin>      DU   2215:U   2276:D 

23374           <dzdrcin>      DU   2218:U   2233:D 

23376           <dzdrcin>      DU   2230:U   2232:D 

23378           <dzdrcin>      DU   2242:U   2244:D 

23380           <dzdrcin>      DU   2251:U   2266:D 

23382           <dzdrcin>      DU   2252:U   2259:D 

23384           <dzdrcin>      DU   2269:U   2273:D 

23386           <dzdrcou>      DU   2360:U   2364:D 

23387           <dzdrcou>      DU   2362:U   2448:D 

23388           <dzdrcou>      DU   2373:U   2378:D 

23389           <dzdrcou>      DU   2376:U   2447:D 

23390           <dzdrcou>      DU   2379:U   2384:D 

23391           <dzdrcou>      DU   2382:U   2446:D 

23392           <dzdrcou>      DU   2397:U   2443:D 

23394           <dzdrcou>      DU   2403:U   2405:D 

23396           <dzdrcou>      DU   2406:U   2438:D 

23398           <dzdrgit>      DU   2564:U   2568:D 

23399           <dzdrgit>      DU   2566:U   2607:D 

23400           <dzdrgit>      DU   2577:U   2594:D 

23402           <dzdrgit>      DU   2583:U   2587:D 

23404           <dzdrgit>      DU   2584:U   2586:D 

23406           <dzdrgit>      DU   2589:U   2591:D 

23408           <dzdrgit>      DU   2601:U   2603:D 

23410           <dzdrgnv>      DU   2704:U   2708:D 

23411           <dzdrgnv>      DU   2706:U   2751:D 

Cross Reference                Fri Apr 19 20:07:44 2002                page 81

23412           <dzdrgnv>      DU   2717:U   2719:D 

23414           <dzdrgnv>      DU   2732:U   2747:D 

23416           <dzdrgnv>      DU   2736:U   2738:D 

23418           <dzdrgnv>      DU   2739:U   2743:D 

23420           <dzdrgnv>      DU   2740:U   2742:D 

23422           <dzdrpoc>      DU   2857:U   2861:D 

23423           <dzdrpoc>      DU   2859:U   2899:D 

23424           <dzdrpoc>      DU   2862:U   2872:D 

23425           <dzdrpoc>      DU   2870:U   2898:D 

23426           <dzdrpoc>      DU   2873:U   2883:D 

23427           <dzdrpoc>      DU   2881:U   2897:D 

23428           <dzdrpoc>      DU   2892:U   2895:D 

------------------------------------------------------------------------------

STATISTIC                   Fri Apr 19 20:07:44 2002                   page 82


Date:     Fri Apr 19 20:07:44 2002
Options:  -PIC -Xlistv4 -O2 -c 
Files:         1
Lines:      2901
Routines:     21 (No MAIN; Subroutines: 20; Functions: 1)
Messages:    100 (Errors: 17; Warnings: 83)
